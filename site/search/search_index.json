{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"easyFlags","text":"<p>High-performance feature flag management with sub-10ms evaluation times.</p>"},{"location":"#ultra-fast-feature-flag-management","title":"Ultra-Fast Feature Flag Management","text":"<p>easyFlags is a high-performance feature flag service with sub-10ms evaluation times, perfect for mission-critical applications where latency matters.</p> <ul> <li> <p> High Performance   Sub-10ms evaluation times with multi-level caching</p> </li> <li> <p> Multi-Tenant   Secure isolation for teams and organizations</p> </li> <li> <p> Advanced Targeting   Sophisticated rules with percentage rollouts</p> </li> <li> <p> Real-Time Updates   Instant flag changes via WebSockets</p> </li> </ul>"},{"location":"#get-started-in-minutes","title":"Get Started in Minutes","text":"<pre><code># Install the JavaScript SDK\nnpm install @easyflags/sdk-js\n\n# Initialize the client\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key'\n});\n\n# Check if a feature is enabled\nconst isEnabled = await client.getBooleanValue('new-feature', false, {\n  userId: 'user-123',\n  userRole: 'premium'\n});\n</code></pre>"},{"location":"#how-it-works","title":"How It Works","text":"<pre><code>graph TD\n    A[Client] --&gt; B[SDK]\n    B --&gt; C{Cache?}\n    C --&gt;|Yes| D[Return Cached Value]\n    C --&gt;|No| E[Evaluation Service]\n    E --&gt; F[Redis Cache]\n    E --&gt; G[Flag Rules]\n    G --&gt; H[Return Evaluation]</code></pre>"},{"location":"#designed-for-high-scale-applications","title":"Designed for High-Scale Applications","text":"<p>easyFlags is built to handle millions of evaluations per second with consistent low-latency responses, making it ideal for applications where performance is critical.</p> <p>Get Started  View on GitHub  </p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#permission-system","title":"Permission System","text":""},{"location":"faq/#what-permissions-do-i-need-to-manage-feature-flags","title":"What permissions do I need to manage feature flags?","text":"<p>To work with feature flags, you'll need some or all of the following permissions: - <code>view:flags</code> - To view flags - <code>create:flags</code> - To create new flags - <code>edit:flags</code> - To modify existing flags - <code>delete:flags</code> - To delete flags - <code>toggle:flags</code> - To enable/disable flags</p> <p>Administrators can assign these permissions individually or through roles.</p>"},{"location":"faq/#how-do-i-check-which-permissions-i-have","title":"How do I check which permissions I have?","text":"<p>You can view your current permissions in two ways: 1. In the UI: Navigate to your profile and select the \"Permissions\" tab 2. Via API: Make a GET request to <code>/api/users/me/permissions</code></p>"},{"location":"faq/#what-should-i-do-if-i-get-a-permission-denied-error","title":"What should I do if I get a \"Permission denied\" error?","text":"<p>If you receive a \"Permission denied\" error, it means you lack the required permissions for that action. The error response will include the specific permissions needed. Contact your system administrator to request these permissions.</p>"},{"location":"faq/#whats-the-difference-between-roles-and-permissions","title":"What's the difference between roles and permissions?","text":"<ul> <li>Permissions are individual access rights in the format <code>action:resource</code> (e.g., <code>view:flags</code>)</li> <li>Roles are collections of permissions bundled together for common user types (e.g., \"Editor\", \"Admin\")</li> </ul> <p>Roles make permission management easier by allowing administrators to assign multiple permissions at once.</p>"},{"location":"faq/#can-i-create-custom-roles","title":"Can I create custom roles?","text":"<p>Yes, users with the <code>assign:roles</code> permission can create and manage custom roles. Custom roles can contain any combination of permissions to match your organization's specific needs.</p>"},{"location":"faq/#feature-flags","title":"Feature Flags","text":""},{"location":"faq/#whats-the-difference-between-a-feature-flag-and-a-targeting-rule","title":"What's the difference between a feature flag and a targeting rule?","text":"<p>A feature flag is a toggle that can enable or disable a feature. A targeting rule defines the specific conditions under which the feature should be enabled, such as for certain user segments, regions, or devices.</p>"},{"location":"faq/#how-do-i-implement-percentage-based-rollouts","title":"How do I implement percentage-based rollouts?","text":"<p>Use a targeting rule with a percentage condition. For example, to roll out a feature to 25% of users:</p> <ol> <li>Create a targeting rule</li> <li>Set the condition type to \"Percentage\"</li> <li>Set the value to 25</li> </ol> <p>The system will consistently assign users to either the enabled or disabled group based on their user ID.</p>"},{"location":"faq/#how-can-i-test-a-feature-flag-before-releasing-it","title":"How can I test a feature flag before releasing it?","text":"<p>Use a targeting rule that includes only test user IDs or test environments. This allows you to validate the feature with a limited audience before wider release.</p>"},{"location":"faq/#api-keys","title":"API Keys","text":""},{"location":"faq/#how-do-i-create-an-api-key","title":"How do I create an API key?","text":"<p>To create an API key, you need the <code>create:apikeys</code> permission. You can generate a key in the UI under Settings &gt; API Keys or via the API with a POST request to <code>/api/users/apikeys</code>.</p>"},{"location":"faq/#what-permissions-are-assigned-to-api-keys","title":"What permissions are assigned to API keys?","text":"<p>API keys inherit the permissions of the user who created them, unless specific permissions are assigned during creation. For evaluation-only API keys, they are restricted to flag evaluation endpoints.</p>"},{"location":"faq/#how-do-i-rotate-api-keys","title":"How do I rotate API keys?","text":"<p>For security, it's recommended to rotate API keys regularly:</p> <ol> <li>Create a new API key</li> <li>Update your applications to use the new key</li> <li>Once all systems are updated, delete the old key</li> </ol>"},{"location":"faq/#multi-tenant-architecture","title":"Multi-Tenant Architecture","text":""},{"location":"faq/#how-are-permissions-managed-across-tenants","title":"How are permissions managed across tenants?","text":"<p>Permissions are scoped to tenants by default. A user with <code>view:flags</code> in Tenant A doesn't automatically have the same permission in Tenant B. However, users with cross-tenant permissions (e.g., <code>cross:tenant:admin</code>) can operate across tenant boundaries.</p>"},{"location":"faq/#can-i-copy-permission-configurations-between-tenants","title":"Can I copy permission configurations between tenants?","text":"<p>Yes, administrators with the <code>cross:tenant:admin</code> permission can copy role and permission configurations between tenants, making it easier to maintain consistent access control across your organization.</p>"},{"location":"api/","title":"API Reference","text":"<p>easyFlags provides a comprehensive REST API for managing feature flags, targeting rules, and flag evaluation. This section documents all available endpoints and how to use them.</p>"},{"location":"api/#base-url","title":"Base URL","text":"<pre><code>https://api.easyflags.example.com\n</code></pre> <p>For self-hosted installations, use your own domain.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All API requests require authentication. easyFlags supports two authentication methods:</p>"},{"location":"api/#jwt-bearer-token","title":"JWT Bearer Token","text":"<pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"api/#api-key","title":"API Key","text":"<pre><code>Authorization: ApiKey your-api-key\n</code></pre>"},{"location":"api/#tenant-identification","title":"Tenant Identification","text":"<p>For multi-tenant installations, include the tenant ID in the <code>x-tenant-id</code> header:</p> <pre><code>x-tenant-id: 123e4567-e89b-12d3-a456-426614174000\n</code></pre>"},{"location":"api/#authorization","title":"Authorization","text":"<p>easyFlags implements a comprehensive permission system that governs access to all resources. Each API endpoint requires specific permissions to access. These permissions follow the format <code>action:resource</code> (e.g., <code>view:flags</code>, <code>create:users</code>).</p> <p>When a request lacks the required permissions, the API returns a 403 Forbidden error with details about the missing permissions:</p> <pre><code>{\n  \"statusCode\": 403,\n  \"message\": \"Permission denied\",\n  \"error\": \"Forbidden\",\n  \"requiredPermissions\": [\"create:flags\"]\n}\n</code></pre> <p>For detailed information about permissions, see Permissions &amp; Access Control.</p>"},{"location":"api/#response-format","title":"Response Format","text":"<p>All responses are returned in JSON format:</p> <pre><code>{\n  \"data\": { ... },  // The response data\n  \"meta\": { ... }   // Metadata about the response (pagination, etc.)\n}\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>Errors follow a standard format:</p> <pre><code>{\n  \"statusCode\": 400,\n  \"message\": \"Invalid request parameters\",\n  \"errors\": [\n    {\n      \"field\": \"name\",\n      \"message\": \"Name is required\"\n    }\n  ]\n}\n</code></pre> <p>Common HTTP status codes:</p> Status Code Description 200 Success 201 Created 400 Bad Request 401 Unauthorized (invalid or missing authentication) 403 Forbidden (missing required permissions) 404 Not Found 429 Too Many Requests 500 Internal Server Error"},{"location":"api/#rate-limits","title":"Rate Limits","text":"<p>API endpoints are rate limited to prevent abuse:</p> <ul> <li>Standard endpoints: 1000 requests per minute per tenant</li> <li>Evaluation endpoints: 10,000 requests per minute per tenant</li> </ul> <p>Rate limit headers are included in all responses:</p> <pre><code>X-RateLimit-Limit: 1000\nX-RateLimit-Remaining: 999\nX-RateLimit-Reset: 1623456789\n</code></pre>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>The API is versioned through the URL path:</p> <pre><code>/api/v1/...\n</code></pre>"},{"location":"api/#available-endpoints","title":"Available Endpoints","text":""},{"location":"api/#feature-flags","title":"Feature Flags","text":"Method Endpoint Description Required Permissions GET <code>/feature-flags</code> List all feature flags <code>view:flags</code> GET <code>/feature-flags/{id}</code> Get a feature flag by ID <code>view:flags</code> GET <code>/feature-flags/key/{key}</code> Get a feature flag by key <code>view:flags</code> POST <code>/feature-flags</code> Create a new feature flag <code>create:flags</code> PATCH <code>/feature-flags/{id}</code> Update a feature flag <code>edit:flags</code> PATCH <code>/feature-flags/key/{key}</code> Update a feature flag by key <code>edit:flags</code> DELETE <code>/feature-flags/{id}</code> Delete a feature flag <code>delete:flags</code>"},{"location":"api/#targeting-rules","title":"Targeting Rules","text":"Method Endpoint Description Required Permissions GET <code>/feature-flags/{flagId}/targeting-rules</code> List targeting rules for a flag <code>view:rules</code> GET <code>/feature-flags/{flagId}/targeting-rules/{id}</code> Get a targeting rule <code>view:rules</code> POST <code>/feature-flags/{flagId}/targeting-rules</code> Create a targeting rule <code>create:rules</code> PATCH <code>/feature-flags/{flagId}/targeting-rules/{id}</code> Update a targeting rule <code>edit:rules</code> DELETE <code>/feature-flags/{flagId}/targeting-rules/{id}</code> Delete a targeting rule <code>delete:rules</code>"},{"location":"api/#permission-management","title":"Permission Management","text":"Method Endpoint Description Required Permissions GET <code>/admin/permissions/all</code> List all available permissions <code>assign:permissions</code> or <code>super:admin</code> GET <code>/admin/permissions/roles</code> List all roles <code>assign:roles</code> or <code>super:admin</code> GET <code>/admin/permissions/users/{userId}</code> Get permissions for a user <code>view:users</code> or <code>super:admin</code> POST <code>/admin/permissions/assign</code> Assign permissions to a user <code>assign:permissions</code> or <code>super:admin</code> POST <code>/admin/permissions/revoke</code> Revoke permissions from a user <code>assign:permissions</code> or <code>super:admin</code> POST <code>/admin/permissions/users/{userId}/roles</code> Assign a role to a user <code>assign:roles</code> or <code>super:admin</code> PUT <code>/admin/permissions/roles/{name}</code> Create or update a role <code>assign:roles</code> or <code>super:admin</code>"},{"location":"api/#evaluation","title":"Evaluation","text":"Method Endpoint Description Required Permissions POST <code>/api/v1/evaluate/{key}</code> Evaluate a single flag API key access only POST <code>/api/v1/evaluate/batch</code> Batch evaluate multiple flags API key access only <p>Detailed documentation for each endpoint is available in the subsequent pages. </p>"},{"location":"api/feature-flags/","title":"Feature Flags API","text":"<p>This section documents the API endpoints for managing feature flags.</p>"},{"location":"api/feature-flags/#feature-flag-object","title":"Feature Flag Object","text":"<pre><code>{\n  \"id\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"New Search Algorithm\",\n  \"key\": \"new-search-algorithm\",\n  \"description\": \"Enables the new search algorithm with improved relevance\",\n  \"enabled\": true,\n  \"tenantId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/feature-flags/#endpoints","title":"Endpoints","text":""},{"location":"api/feature-flags/#list-all-feature-flags","title":"List All Feature Flags","text":"<pre><code>GET /feature-flags\n</code></pre>"},{"location":"api/feature-flags/#query-parameters","title":"Query Parameters","text":"Parameter Type Description <code>tenantId</code> string Filter flags by tenant ID <code>page</code> integer Page number (default: 1) <code>limit</code> integer Items per page (default: 20)"},{"location":"api/feature-flags/#response","title":"Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"id\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"name\": \"New Search Algorithm\",\n      \"key\": \"new-search-algorithm\",\n      \"description\": \"Enables the new search algorithm with improved relevance\",\n      \"enabled\": true,\n      \"tenantId\": \"123e4567-e89b-12d3-a456-426614174000\",\n      \"createdAt\": \"2023-06-01T12:00:00Z\",\n      \"updatedAt\": \"2023-06-01T12:00:00Z\"\n    },\n    // ...more flags\n  ],\n  \"meta\": {\n    \"total\": 42,\n    \"page\": 1,\n    \"limit\": 20\n  }\n}\n</code></pre>"},{"location":"api/feature-flags/#get-a-specific-feature-flag","title":"Get a Specific Feature Flag","text":"<pre><code>GET /feature-flags/{id}\n</code></pre>"},{"location":"api/feature-flags/#response_1","title":"Response","text":"<pre><code>{\n  \"id\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"New Search Algorithm\",\n  \"key\": \"new-search-algorithm\",\n  \"description\": \"Enables the new search algorithm with improved relevance\",\n  \"enabled\": true,\n  \"tenantId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\",\n  \"targetingRules\": [\n    // associated targeting rules (if requested)\n  ]\n}\n</code></pre>"},{"location":"api/feature-flags/#get-a-feature-flag-by-key","title":"Get a Feature Flag by Key","text":"<pre><code>GET /feature-flags/key/{key}\n</code></pre>"},{"location":"api/feature-flags/#query-parameters_1","title":"Query Parameters","text":"Parameter Type Description <code>tenantId</code> string Required tenant ID"},{"location":"api/feature-flags/#response_2","title":"Response","text":"<p>Same as the response for GET /feature-flags/{id}</p>"},{"location":"api/feature-flags/#create-a-feature-flag","title":"Create a Feature Flag","text":"<pre><code>POST /feature-flags\n</code></pre>"},{"location":"api/feature-flags/#request-body","title":"Request Body","text":"<pre><code>{\n  \"name\": \"New Search Algorithm\",\n  \"key\": \"new-search-algorithm\",\n  \"description\": \"Enables the new search algorithm with improved relevance\",\n  \"enabled\": false,\n  \"tenantId\": \"123e4567-e89b-12d3-a456-426614174000\"\n}\n</code></pre>"},{"location":"api/feature-flags/#response_3","title":"Response","text":"<pre><code>{\n  \"id\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"New Search Algorithm\",\n  \"key\": \"new-search-algorithm\",\n  \"description\": \"Enables the new search algorithm with improved relevance\",\n  \"enabled\": false,\n  \"tenantId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/feature-flags/#update-a-feature-flag","title":"Update a Feature Flag","text":"<pre><code>PATCH /feature-flags/{id}\n</code></pre>"},{"location":"api/feature-flags/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"name\": \"Updated Search Algorithm\",\n  \"description\": \"Updated description\",\n  \"enabled\": true\n}\n</code></pre>"},{"location":"api/feature-flags/#response_4","title":"Response","text":"<pre><code>{\n  \"id\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"Updated Search Algorithm\",\n  \"key\": \"new-search-algorithm\",\n  \"description\": \"Updated description\",\n  \"enabled\": true,\n  \"tenantId\": \"123e4567-e89b-12d3-a456-426614174000\",\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:05:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/feature-flags/#update-a-feature-flag-by-key","title":"Update a Feature Flag by Key","text":"<pre><code>PATCH /feature-flags/key/{key}\n</code></pre>"},{"location":"api/feature-flags/#query-parameters_2","title":"Query Parameters","text":"Parameter Type Description <code>tenantId</code> string Required tenant ID"},{"location":"api/feature-flags/#request-body_2","title":"Request Body","text":"<p>Same as PATCH /feature-flags/{id}</p>"},{"location":"api/feature-flags/#response_5","title":"Response","text":"<p>Same as the response for PATCH /feature-flags/{id}</p>"},{"location":"api/feature-flags/#delete-a-feature-flag","title":"Delete a Feature Flag","text":"<pre><code>DELETE /feature-flags/{id}\n</code></pre>"},{"location":"api/feature-flags/#response_6","title":"Response","text":"<pre><code>Status: 204 No Content\n</code></pre>"},{"location":"api/feature-flags/#code-examples","title":"Code Examples","text":""},{"location":"api/feature-flags/#javascript","title":"JavaScript","text":"<pre><code>// Create a feature flag\nconst response = await fetch('https://api.easyflags.example.com/feature-flags', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'New Feature',\n    key: 'new-feature',\n    description: 'A new feature being tested',\n    enabled: false\n  })\n});\n\nconst flag = await response.json();\nconsole.log(flag);\n</code></pre>"},{"location":"api/feature-flags/#python","title":"Python","text":"<pre><code>import requests\n\n# Create a feature flag\nresponse = requests.post(\n    'https://api.easyflags.example.com/feature-flags',\n    headers={\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n        'x-tenant-id': 'YOUR_TENANT_ID'\n    },\n    json={\n        'name': 'New Feature',\n        'key': 'new-feature',\n        'description': 'A new feature being tested',\n        'enabled': False\n    }\n)\n\nflag = response.json()\nprint(flag)\n</code></pre>"},{"location":"api/permissions/","title":"Permissions &amp; Access Control","text":"<p>easyFlags implements a robust, role-based permission system that allows fine-grained access control across all platform features. This document provides a comprehensive reference for the permission system, including available permissions, roles, and API endpoints for permission management.</p>"},{"location":"api/permissions/#permission-model","title":"Permission Model","text":"<p>The permission system in easyFlags follows these core principles:</p> <ol> <li>Permission Format: All permissions follow the format <code>action:resource</code> (e.g., <code>view:flags</code>, <code>create:users</code>)</li> <li>Role-Based Access Control: Users can be assigned predefined roles with bundled permissions</li> <li>Direct Permission Assignment: Individual permissions can be granted directly to users</li> <li>Tenant Isolation: Permissions are enforced within tenant boundaries for multi-tenant scenarios</li> <li>Audit Logging: All permission changes are recorded for compliance and security</li> </ol>"},{"location":"api/permissions/#available-permissions","title":"Available Permissions","text":"<p>Permissions are grouped by resource category:</p>"},{"location":"api/permissions/#profile-preferences","title":"Profile &amp; Preferences","text":"Permission Description <code>view:profile</code> View own user profile <code>edit:profile</code> Edit own profile details <code>change:password</code> Change own password <code>view:preferences</code> View own user preferences <code>edit:preferences</code> Edit own user preferences"},{"location":"api/permissions/#feature-flags","title":"Feature Flags","text":"Permission Description <code>view:flags</code> View feature flags <code>create:flags</code> Create new feature flags <code>edit:flags</code> Edit existing feature flags <code>delete:flags</code> Delete feature flags <code>toggle:flags</code> Toggle flags on/off"},{"location":"api/permissions/#targeting-rules","title":"Targeting Rules","text":"Permission Description <code>view:rules</code> View targeting rules <code>create:rules</code> Create targeting rules <code>edit:rules</code> Edit targeting rules <code>delete:rules</code> Delete targeting rules"},{"location":"api/permissions/#flag-versions","title":"Flag Versions","text":"Permission Description <code>view:versions</code> View flag versions <code>create:versions</code> Create flag versions <code>rollback:versions</code> Rollback to previous versions"},{"location":"api/permissions/#tenant-management","title":"Tenant Management","text":"Permission Description <code>view:tenants</code> View tenants <code>create:tenants</code> Create tenants <code>edit:tenants</code> Edit tenant details <code>delete:tenants</code> Delete tenants"},{"location":"api/permissions/#user-management","title":"User Management","text":"Permission Description <code>view:users</code> View users <code>create:users</code> Create users <code>edit:users</code> Edit user details <code>delete:users</code> Delete users"},{"location":"api/permissions/#api-keys","title":"API Keys","text":"Permission Description <code>view:apikeys</code> View own API keys <code>create:apikeys</code> Create API keys <code>delete:apikeys</code> Delete own API keys <code>manage:all:apikeys</code> Manage all users' API keys"},{"location":"api/permissions/#administration","title":"Administration","text":"Permission Description <code>assign:permissions</code> Assign permissions to users <code>assign:roles</code> Assign roles to users <code>view:metrics</code> View system metrics <code>copy:flags</code> Copy flags between environments <code>sync:flags</code> Sync flags between tenants <code>super:admin</code> Full system access (grants all permissions)"},{"location":"api/permissions/#cross-tenant-operations","title":"Cross-Tenant Operations","text":"Permission Description <code>cross:tenant:view</code> View resources across tenants <code>cross:tenant:edit</code> Edit resources across tenants <code>cross:tenant:admin</code> Administrative access across tenants"},{"location":"api/permissions/#predefined-roles","title":"Predefined Roles","text":"<p>easyFlags comes with several predefined roles:</p> Role Description Key Permissions <code>reader</code> Read-only access to flags and rules <code>view:flags</code>, <code>view:rules</code>, <code>view:versions</code> <code>editor</code> Can edit flags and rules Reader permissions + <code>edit:flags</code>, <code>create:rules</code>, etc. <code>admin</code> Full administrative access Editor permissions + user management, tenant access <code>super_admin</code> System-wide super user All permissions via <code>super:admin</code>"},{"location":"api/permissions/#permission-management-api","title":"Permission Management API","text":""},{"location":"api/permissions/#get-all-available-permissions","title":"Get All Available Permissions","text":"<p>Retrieves a list of all permissions available in the system.</p> <pre><code>GET /api/admin/permissions/all\n</code></pre> <p>Required Permissions: <code>assign:permissions</code> or <code>super:admin</code></p> <p>Response Example:</p> <pre><code>{\n  \"view:profile\": {\n    \"group\": \"profile\", \n    \"description\": \"View own profile\"\n  },\n  \"edit:profile\": {\n    \"group\": \"profile\", \n    \"description\": \"Edit own profile\"\n  },\n  // ... other permissions\n}\n</code></pre>"},{"location":"api/permissions/#get-all-roles","title":"Get All Roles","text":"<p>Retrieves all roles defined in the system.</p> <pre><code>GET /api/admin/permissions/roles\n</code></pre> <p>Required Permissions: <code>assign:roles</code> or <code>super:admin</code></p> <p>Response Example:</p> <pre><code>{\n  \"reader\": {\n    \"name\": \"Reader\",\n    \"description\": \"Read-only access to flags\",\n    \"permissions\": [\"view:flags\", \"view:rules\", \"view:versions\"]\n  },\n  // ... other roles\n}\n</code></pre>"},{"location":"api/permissions/#get-user-permissions","title":"Get User Permissions","text":"<p>Retrieves all permissions assigned to a specific user.</p> <pre><code>GET /api/admin/permissions/users/:userId\n</code></pre> <p>Required Permissions: <code>view:users</code> or <code>super:admin</code></p> <p>Response Example:</p> <pre><code>{\n  \"user\": {\n    \"id\": \"user123\",\n    \"email\": \"user@example.com\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"role\": \"editor\"\n  },\n  \"permissions\": [\n    \"view:flags\",\n    \"edit:flags\",\n    \"view:rules\",\n    // ... other permissions\n  ],\n  \"roles\": [\"editor\"]\n}\n</code></pre>"},{"location":"api/permissions/#assign-permissions-to-user","title":"Assign Permissions to User","text":"<p>Assigns specific permissions to a user.</p> <pre><code>POST /api/admin/permissions/assign\n</code></pre> <p>Required Permissions: <code>assign:permissions</code> or <code>super:admin</code></p> <p>Request Body:</p> <pre><code>{\n  \"userId\": \"user123\",\n  \"permissions\": [\"create:flags\", \"edit:flags\", \"view:tenants\"]\n}\n</code></pre> <p>Response Example:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Permissions assigned successfully\",\n  \"userId\": \"user123\",\n  \"permissions\": [\"create:flags\", \"edit:flags\", \"view:tenants\"]\n}\n</code></pre>"},{"location":"api/permissions/#revoke-permissions-from-user","title":"Revoke Permissions from User","text":"<p>Revokes specific permissions from a user.</p> <pre><code>POST /api/admin/permissions/revoke\n</code></pre> <p>Required Permissions: <code>assign:permissions</code> or <code>super:admin</code></p> <p>Request Body:</p> <pre><code>{\n  \"userId\": \"user123\",\n  \"permissions\": [\"edit:flags\", \"view:tenants\"]\n}\n</code></pre> <p>Response Example:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Permissions revoked successfully\",\n  \"userId\": \"user123\",\n  \"permissions\": [\"edit:flags\", \"view:tenants\"]\n}\n</code></pre>"},{"location":"api/permissions/#assign-role-to-user","title":"Assign Role to User","text":"<p>Assigns a role to a user.</p> <pre><code>POST /api/admin/permissions/users/:userId/roles\n</code></pre> <p>Required Permissions: <code>assign:roles</code> or <code>super:admin</code></p> <p>Request Body:</p> <pre><code>{\n  \"role\": \"editor\"\n}\n</code></pre> <p>Response Example:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Role assigned successfully\",\n  \"userId\": \"user123\",\n  \"role\": \"editor\"\n}\n</code></pre>"},{"location":"api/permissions/#create-or-update-role","title":"Create or Update Role","text":"<p>Creates a new role or updates an existing one.</p> <pre><code>PUT /api/admin/permissions/roles/:name\n</code></pre> <p>Required Permissions: <code>assign:roles</code> or <code>super:admin</code></p> <p>Request Body:</p> <pre><code>{\n  \"name\": \"content_manager\",\n  \"description\": \"Manages content and flags for marketing\",\n  \"permissions\": [\n    \"view:flags\",\n    \"edit:flags\",\n    \"view:rules\",\n    \"edit:rules\"\n  ]\n}\n</code></pre> <p>Response Example:</p> <pre><code>{\n  \"success\": true,\n  \"message\": \"Role updated successfully\",\n  \"role\": {\n    \"name\": \"content_manager\",\n    \"description\": \"Manages content and flags for marketing\",\n    \"permissions\": [\n      \"view:flags\",\n      \"edit:flags\",\n      \"view:rules\",\n      \"edit:rules\"\n    ]\n  }\n}\n</code></pre>"},{"location":"api/permissions/#error-handling","title":"Error Handling","text":"<p>Permission-related errors return appropriate HTTP status codes with detailed messages:</p> Error HTTP Status Description Permission Denied 403 User lacks required permissions User Not Found 404 The specified user doesn't exist Invalid Permission 400 The permission format is invalid Role Not Found 404 The specified role doesn't exist <p>Example Error Response:</p> <pre><code>{\n  \"statusCode\": 403,\n  \"message\": \"Permission denied\",\n  \"error\": \"Forbidden\",\n  \"requiredPermissions\": [\"assign:permissions\"]\n}\n</code></pre>"},{"location":"api/permissions/#best-practices","title":"Best Practices","text":"<ol> <li>Principle of Least Privilege: Assign only the permissions users need to perform their job functions</li> <li>Use Roles: For common permission sets, create roles instead of assigning individual permissions</li> <li>Regular Audits: Periodically review permission assignments to ensure proper access levels</li> <li>Permission Monitoring: Monitor for failed permission checks to identify potential security issues</li> <li>Custom Roles: Create custom roles tailored to specific business functions rather than using generic roles</li> </ol>"},{"location":"api/permissions/#integration-with-authentication","title":"Integration with Authentication","text":"<p>Permission checks are performed after successful authentication. The system uses:</p> <ol> <li>A <code>JwtAuthGuard</code> to validate the authentication token</li> <li>A <code>PermissionsGuard</code> to check if the authenticated user has the required permissions</li> <li>The <code>@RequirePermissions()</code> decorator to specify required permissions for endpoints</li> </ol> <pre><code>@UseGuards(JwtAuthGuard, PermissionsGuard)\n@RequirePermissions(Permission.VIEW_FLAGS)\nasync getFlags() {\n  // This endpoint requires 'view:flags' permission\n}\n</code></pre>"},{"location":"api/targeting-rules/","title":"Targeting Rules API","text":"<p>This section documents the API endpoints for managing targeting rules for feature flags.</p>"},{"location":"api/targeting-rules/#targeting-rule-object","title":"Targeting Rule Object","text":"<pre><code>{\n  \"id\": \"r8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"Premium Users\",\n  \"description\": \"Enable for premium users\",\n  \"featureFlagId\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"percentage\": 100,\n  \"enabled\": true,\n  \"conditions\": [\n    {\n      \"id\": \"c8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"attribute\": \"userRole\",\n      \"operator\": \"EQUALS\",\n      \"value\": \"premium\"\n    }\n  ],\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/targeting-rules/#endpoints","title":"Endpoints","text":""},{"location":"api/targeting-rules/#list-targeting-rules-for-a-flag","title":"List Targeting Rules for a Flag","text":"<pre><code>GET /feature-flags/{flagId}/targeting-rules\n</code></pre>"},{"location":"api/targeting-rules/#response","title":"Response","text":"<pre><code>{\n  \"data\": [\n    {\n      \"id\": \"r8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"name\": \"Premium Users\",\n      \"description\": \"Enable for premium users\",\n      \"featureFlagId\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"percentage\": 100,\n      \"enabled\": true,\n      \"conditions\": [\n        {\n          \"id\": \"c8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n          \"attribute\": \"userRole\",\n          \"operator\": \"EQUALS\",\n          \"value\": \"premium\"\n        }\n      ],\n      \"createdAt\": \"2023-06-01T12:00:00Z\",\n      \"updatedAt\": \"2023-06-01T12:00:00Z\"\n    },\n    // ...more targeting rules\n  ]\n}\n</code></pre>"},{"location":"api/targeting-rules/#get-a-specific-targeting-rule","title":"Get a Specific Targeting Rule","text":"<pre><code>GET /feature-flags/{flagId}/targeting-rules/{id}\n</code></pre>"},{"location":"api/targeting-rules/#response_1","title":"Response","text":"<pre><code>{\n  \"id\": \"r8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"Premium Users\",\n  \"description\": \"Enable for premium users\",\n  \"featureFlagId\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"percentage\": 100,\n  \"enabled\": true,\n  \"conditions\": [\n    {\n      \"id\": \"c8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"attribute\": \"userRole\",\n      \"operator\": \"EQUALS\",\n      \"value\": \"premium\"\n    }\n  ],\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/targeting-rules/#create-a-targeting-rule","title":"Create a Targeting Rule","text":"<pre><code>POST /feature-flags/{flagId}/targeting-rules\n</code></pre>"},{"location":"api/targeting-rules/#request-body","title":"Request Body","text":"<pre><code>{\n  \"name\": \"Premium Users\",\n  \"description\": \"Enable for premium users\",\n  \"percentage\": 100,\n  \"enabled\": true,\n  \"conditions\": [\n    {\n      \"attribute\": \"userRole\",\n      \"operator\": \"EQUALS\",\n      \"value\": \"premium\"\n    }\n  ]\n}\n</code></pre>"},{"location":"api/targeting-rules/#response_2","title":"Response","text":"<pre><code>{\n  \"id\": \"r8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"Premium Users\",\n  \"description\": \"Enable for premium users\",\n  \"featureFlagId\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"percentage\": 100,\n  \"enabled\": true,\n  \"conditions\": [\n    {\n      \"id\": \"c8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"attribute\": \"userRole\",\n      \"operator\": \"EQUALS\",\n      \"value\": \"premium\"\n    }\n  ],\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:00:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/targeting-rules/#update-a-targeting-rule","title":"Update a Targeting Rule","text":"<pre><code>PATCH /feature-flags/{flagId}/targeting-rules/{id}\n</code></pre>"},{"location":"api/targeting-rules/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"name\": \"Updated Rule Name\",\n  \"percentage\": 50,\n  \"conditions\": [\n    {\n      \"attribute\": \"userRole\",\n      \"operator\": \"EQUALS\",\n      \"value\": \"premium\"\n    },\n    {\n      \"attribute\": \"country\",\n      \"operator\": \"IN\",\n      \"value\": [\"US\", \"CA\", \"UK\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"api/targeting-rules/#response_3","title":"Response","text":"<pre><code>{\n  \"id\": \"r8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"name\": \"Updated Rule Name\",\n  \"description\": \"Enable for premium users\",\n  \"featureFlagId\": \"f8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n  \"percentage\": 50,\n  \"enabled\": true,\n  \"conditions\": [\n    {\n      \"id\": \"c8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"attribute\": \"userRole\",\n      \"operator\": \"EQUALS\",\n      \"value\": \"premium\"\n    },\n    {\n      \"id\": \"d8c3de3d-1fea-4d7c-a8b0-29f63c4c3454\",\n      \"attribute\": \"country\",\n      \"operator\": \"IN\",\n      \"value\": [\"US\", \"CA\", \"UK\"]\n    }\n  ],\n  \"createdAt\": \"2023-06-01T12:00:00Z\",\n  \"updatedAt\": \"2023-06-01T12:05:00Z\",\n  \"createdBy\": \"user-123\",\n  \"updatedBy\": \"user-123\"\n}\n</code></pre>"},{"location":"api/targeting-rules/#delete-a-targeting-rule","title":"Delete a Targeting Rule","text":"<pre><code>DELETE /feature-flags/{flagId}/targeting-rules/{id}\n</code></pre>"},{"location":"api/targeting-rules/#response_4","title":"Response","text":"<pre><code>Status: 204 No Content\n</code></pre>"},{"location":"api/targeting-rules/#code-examples","title":"Code Examples","text":""},{"location":"api/targeting-rules/#javascript","title":"JavaScript","text":"<pre><code>// Create a targeting rule\nconst response = await fetch(`https://api.easyflags.example.com/feature-flags/${flagId}/targeting-rules`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'Beta Users in US',\n    description: 'Target beta users in the United States',\n    percentage: 50,\n    enabled: true,\n    conditions: [\n      {\n        attribute: 'userRole',\n        operator: 'EQUALS',\n        value: 'beta'\n      },\n      {\n        attribute: 'location.country',\n        operator: 'EQUALS',\n        value: 'US'\n      }\n    ]\n  })\n});\n\nconst rule = await response.json();\nconsole.log(rule);\n</code></pre>"},{"location":"api/targeting-rules/#python","title":"Python","text":"<pre><code>import requests\n\n# Create a targeting rule\nresponse = requests.post(\n    f'https://api.easyflags.example.com/feature-flags/{flag_id}/targeting-rules',\n    headers={\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n        'x-tenant-id': 'YOUR_TENANT_ID'\n    },\n    json={\n        'name': 'Beta Users in US',\n        'description': 'Target beta users in the United States',\n        'percentage': 50,\n        'enabled': True,\n        'conditions': [\n            {\n                'attribute': 'userRole',\n                'operator': 'EQUALS',\n                'value': 'beta'\n            },\n            {\n                'attribute': 'location.country',\n                'operator': 'EQUALS',\n                'value': 'US'\n            }\n        ]\n    }\n)\n\nrule = response.json()\nprint(rule)\n</code></pre>"},{"location":"api/url-structure/","title":"API URL Structure","text":"<p>This document outlines the standardized URL structure for all API endpoints in the EasyFlags service.</p>"},{"location":"api/url-structure/#base-structure","title":"Base Structure","text":"<p>All API endpoints follow this consistent pattern:</p> <pre><code>https://{domain}/api/v{version}/{resource-category}/{resource}/{action}\n</code></pre>"},{"location":"api/url-structure/#components","title":"Components","text":"<ul> <li>domain: The server domain (e.g., localhost:3000)</li> <li>api: Fixed prefix for all API endpoints</li> <li>version: API version number (e.g., v1, v2)</li> <li>resource-category: Logical grouping of related resources</li> <li>resource: The primary resource being accessed</li> <li>action: Optional specific operation on a resource</li> </ul>"},{"location":"api/url-structure/#resource-categories","title":"Resource Categories","text":"<p>The API is organized into these main categories:</p> <ol> <li> <p>admin: Administrative operations    <pre><code>/api/v1/admin/tenants\n/api/v1/admin/users\n/api/v1/admin/flags\n/api/v1/admin/permissions\n</code></pre></p> </li> <li> <p>auth: Authentication and authorization    <pre><code>/api/v1/auth/login\n/api/v1/auth/token\n/api/v1/auth/register\n</code></pre></p> </li> <li> <p>flags: Feature flag management    <pre><code>/api/v1/flags\n/api/v1/flags/{id}\n/api/v1/flags/{key}/toggle\n</code></pre></p> </li> <li> <p>tenants: Tenant management    <pre><code>/api/v1/tenants\n/api/v1/tenants/{id}\n</code></pre></p> </li> <li> <p>evaluation: Flag evaluation    <pre><code>/api/v1/evaluation/{key}\n/api/v1/evaluation/batch\n</code></pre></p> </li> <li> <p>monitoring: Health and diagnostics    <pre><code>/api/v1/monitoring/health\n/api/v1/monitoring/metrics\n</code></pre></p> </li> <li> <p>permissions: Permission management    <pre><code>/api/v1/admin/permissions/all\n/api/v1/admin/permissions/roles\n/api/v1/admin/permissions/users/{userId}\n</code></pre></p> </li> </ol>"},{"location":"api/url-structure/#resource-naming-conventions","title":"Resource Naming Conventions","text":"<ul> <li>Resources are named using plural nouns (flags, tenants, users)</li> <li>Multi-word resources use kebab-case (feature-flags, api-keys)</li> <li>Actions use verbs (toggle, activate, clone)</li> </ul>"},{"location":"api/url-structure/#http-methods","title":"HTTP Methods","text":"<p>The API uses standard HTTP methods to represent operations:</p> <ul> <li>GET: Retrieve resources</li> <li>POST: Create new resources or perform complex operations</li> <li>PUT: Update resources completely</li> <li>PATCH: Update resources partially</li> <li>DELETE: Remove resources</li> </ul>"},{"location":"api/url-structure/#example-endpoints","title":"Example Endpoints","text":"Operation Method Endpoint Required Permission List all flags GET <code>/api/v1/flags</code> <code>view:flags</code> Get flag by ID GET <code>/api/v1/flags/{id}</code> <code>view:flags</code> Get flag by key GET <code>/api/v1/flags/key/{key}</code> <code>view:flags</code> Create a new flag POST <code>/api/v1/flags</code> <code>create:flags</code> Update a flag PUT <code>/api/v1/flags/{id}</code> <code>edit:flags</code> Toggle a flag PATCH <code>/api/v1/flags/{key}/toggle</code> <code>toggle:flags</code> Delete a flag DELETE <code>/api/v1/flags/{id}</code> <code>delete:flags</code> Evaluate a flag POST <code>/api/v1/evaluation/{key}</code> API key access Authenticate POST <code>/api/v1/auth/token</code> No permission required System health check GET <code>/api/v1/monitoring/health</code> No permission required List all permissions GET <code>/api/v1/admin/permissions/all</code> <code>assign:permissions</code> or <code>super:admin</code> Get user permissions GET <code>/api/v1/admin/permissions/users/{userId}</code> <code>view:users</code> or <code>super:admin</code> Assign permissions POST <code>/api/v1/admin/permissions/assign</code> <code>assign:permissions</code> or <code>super:admin</code>"},{"location":"api/url-structure/#headers","title":"Headers","text":"<p>All API requests should include these headers when applicable:</p> <ul> <li>Authorization: <code>Bearer {token}</code> for authentication</li> <li>X-Tenant-ID: The tenant identifier for multi-tenant operations</li> <li>Content-Type: <code>application/json</code> for request bodies </li> </ul>"},{"location":"api/url-structure/#permission-requirements","title":"Permission Requirements","text":"<p>All API endpoints (except authentication and certain public endpoints) require specific permissions to access. If a request lacks the required permissions, the API will return a 403 Forbidden response with details about the missing permissions.</p> <p>For a complete list of permission requirements for each endpoint, see the Permissions &amp; Access Control documentation. </p>"},{"location":"api/versioning/","title":"API Versioning","text":""},{"location":"api/versioning/#current-status","title":"Current Status","text":"<p>The easyFlags API currently uses implicit versioning rather than explicit URL path versioning. While the documentation references paths like <code>/api/v1/...</code>, the actual implementation delivers all endpoints directly under the <code>/api/</code> path without version segments.</p> <p>This status is indicated during server startup with the message: <pre><code>\ud83d\udcdc API Versioning : Disabled\n</code></pre></p>"},{"location":"api/versioning/#expected-url-structure","title":"Expected URL Structure","text":"<p>Despite the disabled versioning in URLs, the API is designed with future versioning in mind. The documentation shows the intended structure for when versioning is enabled:</p> <pre><code>https://{domain}/api/v{version}/{resource-category}/{resource}/{action}\n</code></pre>"},{"location":"api/versioning/#working-with-the-current-implementation","title":"Working with the Current Implementation","text":"<p>When making API requests, you should:</p> <ol> <li>Omit the version segment from your URLs:</li> <li>\u2705 Use: <code>/api/flags</code></li> <li> <p>\u274c Not: <code>/api/v1/flags</code></p> </li> <li> <p>Follow documentation examples which may show versioned paths but implement the functionality without the version segment.</p> </li> <li> <p>Check the response headers for API version information, which may be included even without URL versioning.</p> </li> </ol>"},{"location":"api/versioning/#future-plans","title":"Future Plans","text":"<p>The API is designed to support explicit versioning in the future. When this feature is enabled:</p> <ol> <li>Existing endpoints will be accessible at their versioned paths (<code>/api/v1/...</code>)</li> <li>New API versions will be introduced at higher version paths (<code>/api/v2/...</code>)</li> <li>The server will notify clients of this change through appropriate headers</li> </ol>"},{"location":"api/versioning/#implementation-details","title":"Implementation Details","text":"<p>The versioning mechanism is configured in the server's main bootstrap file (<code>main.ts</code>) but is currently commented out:</p> <pre><code>// Currently disabled\n// app.enableVersioning({\n//   type: VersioningType.URI,\n//   defaultVersion: '1',\n//   prefix: 'api/v',\n// });\n</code></pre> <p>When this configuration is enabled, all endpoints will be properly versioned in the URL path. </p>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>easyFlags is designed as a high-performance, multi-tenant feature flag service with a focus on ultra-low latency evaluation. This page provides an overview of the system architecture and components.</p>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<pre><code>flowchart TB\n    %% DEFINE STYLES - Clean minimal design\n    classDef clientBox fill:#e3f2fd,stroke:#1565c0,stroke-width:1px,color:black,rx:0px\n    classDef sdkBox fill:#bbdefb,stroke:#1976d2,stroke-width:1px,color:black,rx:0px\n    classDef networkBox fill:#fff8e1,stroke:#ff8f00,stroke-width:1px,color:black,rx:0px\n    classDef serviceBox fill:#e8f5e9,stroke:#2e7d32,stroke-width:1px,color:black,rx:0px\n    classDef dataBox fill:#f3e5f5,stroke:#8e24aa,stroke-width:1px,color:black,rx:0px\n    classDef monitorBox fill:#ffebee,stroke:#c2185b,stroke-width:1px,color:black,rx:0px\n\n    %% CLIENT APPLICATIONS\n    subgraph clientLayer[\"CLIENT APPLICATIONS\"]\n        direction LR\n        MobileApp[\"Mobile Apps&lt;br&gt;(iOS/Android)\"]\n        WebApp[\"Web Admin UI&lt;br&gt;(React)\"]\n        ServerApp[\"Server Apps&lt;br&gt;(Node.js/Java/Python)\"]\n    end\n\n    %% SDK INTEGRATION LAYER\n    subgraph sdkLayer[\"SDK INTEGRATION LAYER\"]\n        direction LR\n        subgraph BrowserSDKs[\"Browser SDKs\"]\n            JSsdk[\"JavaScript SDK\"]\n            ReactSDK[\"React SDK\"]\n        end\n\n        subgraph ServerSDKs[\"Server SDKs\"]\n            NodeSDK[\"Node.js SDK\"]\n            PythonSDK[\"Python SDK\"]\n            JavaSDK[\"Java SDK\"]\n        end\n\n        subgraph ClientCache[\"Client-Side Caching\"]\n            LocalCache[\"SDK Local Cache\"]\n        end\n    end\n\n    %% NETWORKING LAYER\n    subgraph networkLayer[\"NETWORKING LAYER\"]\n        direction LR\n        subgraph ApiGateways[\"API Gateways\"]\n            RestAPI[\"REST API Gateway\"]\n            WsAPI[\"WebSocket Gateway\"]\n        end\n\n        LoadBalancer[\"Load Balancer\"]\n    end\n\n    %% CORE SERVICES LAYER\n    subgraph serviceLayer[\"CORE SERVICE LAYER\"]\n        direction LR\n        subgraph FlagMgmt[\"Flag Management\"]\n            FlagService[\"Feature Flag Service\"]\n            RulesService[\"Targeting Rules Service\"]\n            VersionService[\"Flag Version Service\"]\n        end\n\n        subgraph Auth[\"Authentication &amp; Authorization\"]\n            AuthService[\"Auth Service\"]\n            PermService[\"Permission Service\"]\n        end\n\n        subgraph Admin[\"Administration\"]\n            AdminService[\"Admin Service\"]\n            TenantService[\"Tenant Management\"]\n            AuditService[\"Audit Log Service\"]\n        end\n\n        subgraph Eval[\"Flag Evaluation\"]\n            EvalService[\"High-Performance Evaluation Service\"]\n        end\n    end\n\n    %% DATA MANAGEMENT LAYER\n    subgraph dataLayer[\"DATA MANAGEMENT LAYER\"]\n        direction LR\n        subgraph Cache[\"High-Speed Caching\"]\n            RedisCache[\"Redis Cache&lt;br&gt;(Flag Definitions)\"]\n        end\n\n        subgraph Storage[\"Persistent Storage\"]\n            PostgresDB[\"PostgreSQL&lt;br&gt;(Primary Database)\"]\n            TimeSeriesDB[\"Time-Series DB&lt;br&gt;(Analytics)\"]\n            AuditLogs[\"Audit Log Storage\"]\n        end\n    end\n\n    %% MONITORING LAYER\n    subgraph monitorLayer[\"MONITORING &amp; OPERATIONS\"]\n        direction LR\n        Metrics[\"Metrics Collection&lt;br&gt;(Prometheus)\"]\n        Dashboards[\"Dashboards&lt;br&gt;(Grafana)\"]\n        Alerting[\"Alert System\"]\n        Logs[\"Centralized Logging\"]\n    end\n\n    %% MAIN VERTICAL CONNECTIONS ONLY\n    clientLayer --&gt; sdkLayer\n    sdkLayer --&gt; networkLayer\n    networkLayer --&gt; serviceLayer\n    serviceLayer --&gt; dataLayer\n    dataLayer --&gt; monitorLayer\n\n    %% STYLE APPLICATION\n    clientLayer:::clientBox\n    sdkLayer:::sdkBox\n    networkLayer:::networkBox\n    serviceLayer:::serviceBox\n    dataLayer:::dataBox\n    monitorLayer:::monitorBox</code></pre>"},{"location":"architecture/#key-components","title":"Key Components","text":"<p>easyFlags consists of several key components, each with a specific role in the system:</p>"},{"location":"architecture/#client-side-components","title":"Client-Side Components","text":"<ul> <li>Web Admin UI: Browser-based interface for managing feature flags and permissions</li> <li>Mobile Apps: Native mobile applications for on-the-go flag management</li> <li>Server Applications: Server-side applications consuming feature flags</li> <li>SDK Libraries: Client libraries for different languages (JavaScript, React, Node.js, Python, Java)</li> <li>Local SDK Cache: Client-side caching to minimize network requests and improve performance</li> </ul>"},{"location":"architecture/#infrastructure-components","title":"Infrastructure Components","text":"<ul> <li>Load Balancer: Distributes traffic and ensures high availability</li> <li>REST API Gateway: Routes requests to appropriate services, handles authentication/authorization</li> <li>WebSocket Gateway: Provides real-time flag updates to connected clients</li> </ul>"},{"location":"architecture/#core-services","title":"Core Services","text":"<ul> <li>Auth Service: Manages user authentication, JWT tokens, and API keys</li> <li>Permission Service: Implements role-based access control and fine-grained permissions</li> <li>Feature Flag Service: Handles CRUD operations for feature flags</li> <li>Targeting Rules Service: Manages targeting rules and conditions</li> <li>Flag Version Service: Manages flag versioning and rollback capabilities</li> <li>Evaluation Service: High-performance engine optimized for sub-10ms response times</li> <li>Admin Service: Provides administrative functions and user management</li> <li>Tenant Service: Manages multi-tenant boundaries and isolation</li> <li>Audit Log Service: Records all system activities for compliance and debugging</li> </ul>"},{"location":"architecture/#data-storage","title":"Data Storage","text":"<ul> <li>Redis Cache: In-memory cache for flag definitions and evaluation results</li> <li>PostgreSQL Database: Persistent storage for feature flags, rules, users, and configuration</li> <li>Analytics Database: Time-series storage for metrics and usage analytics</li> <li>Audit Log Storage: Specialized storage for security and compliance audit trails</li> </ul>"},{"location":"architecture/#monitoring-operations","title":"Monitoring &amp; Operations","text":"<ul> <li>Metrics Collection: Collects system metrics using Prometheus</li> <li>Dashboards: Visualizes metrics and performance using Grafana</li> <li>Alert System: Proactive notification for system issues and anomalies</li> <li>Centralized Logging: Aggregates logs from all system components</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":""},{"location":"architecture/#evaluation-flow","title":"Evaluation Flow","text":"<pre><code>sequenceDiagram\n    participant Client\n    participant SDK\n    participant API\n    participant Cache\n    participant DB\n\n    Client-&gt;&gt;SDK: checkFlag(\"feature\", context)\n\n    alt Local cache hit\n        SDK--&gt;&gt;Client: Return cached result\n    else Local cache miss\n        SDK-&gt;&gt;API: POST /api/v1/evaluate/feature\n\n        API-&gt;&gt;Cache: Check Redis cache\n\n        alt Redis cache hit\n            Cache--&gt;&gt;API: Return cached result\n        else Redis cache miss\n            API-&gt;&gt;DB: Query flag definition\n            DB--&gt;&gt;API: Return flag data\n            API-&gt;&gt;API: Evaluate rules\n            API-&gt;&gt;Cache: Store result\n        end\n\n        API--&gt;&gt;SDK: Return evaluation result\n        SDK-&gt;&gt;SDK: Update local cache\n        SDK--&gt;&gt;Client: Return result\n    end</code></pre>"},{"location":"architecture/#flag-update-flow","title":"Flag Update Flow","text":"<pre><code>sequenceDiagram\n    participant Admin\n    participant API\n    participant DB\n    participant EventBus\n    participant WebSocket\n    participant Client\n\n    Admin-&gt;&gt;API: Update flag\n    API-&gt;&gt;DB: Save changes\n    DB--&gt;&gt;API: Success\n    API-&gt;&gt;EventBus: Publish flag changed event\n    EventBus-&gt;&gt;WebSocket: Notify of flag change\n    WebSocket-&gt;&gt;Client: Flag changed notification\n    Client-&gt;&gt;Client: Invalidate cache\n    Client-&gt;&gt;API: Request updated flag\n    API--&gt;&gt;Client: Return updated flag</code></pre>"},{"location":"architecture/#class-diagram","title":"Class Diagram","text":"<pre><code>classDiagram\n    class FeatureFlag {\n        +String id\n        +String name\n        +String key\n        +Boolean enabled\n        +String tenantId\n        +DateTime createdAt\n        +create()\n        +update()\n        +delete()\n    }\n\n    class TargetingRule {\n        +String id\n        +String featureFlagId\n        +String name\n        +Number percentage\n        +Boolean enabled\n        +evaluate(context)\n    }\n\n    class Condition {\n        +String id\n        +String targetingRuleId\n        +String attribute\n        +String operator\n        +Any value\n        +matches(context)\n    }\n\n    class EvaluationService {\n        +evaluateFlag(key, context)\n        +batchEvaluate(keys, context)\n        -getFlagDefinition(key)\n        -evaluateFlagRules(flag, context)\n        -matchesRule(rule, context)\n    }\n\n    FeatureFlag \"1\" *-- \"many\" TargetingRule\n    TargetingRule \"1\" *-- \"many\" Condition\n    EvaluationService --&gt; FeatureFlag : evaluates</code></pre>"},{"location":"architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>easyFlags can be deployed in various configurations depending on your requirements:</p> <pre><code>graph TD\n    subgraph \"Self-Hosted\"\n        A[Docker Compose] --&gt; B[Single Server]\n        C[Kubernetes] --&gt; D[Clustered]\n    end\n\n    subgraph \"Managed Service\"\n        E[AWS] --&gt; F[Auto-scaling]\n        G[GCP] --&gt; H[Multi-region]\n    end\n\n    classDef primary fill:#4051b5,stroke:#4051b5,color:white\n    classDef secondary fill:#7986cb,stroke:#7986cb,color:white\n\n    class A,C,E,G primary\n    class B,D,F,H secondary</code></pre> <p>In the next sections, we'll dive deeper into each component of the architecture. </p>"},{"location":"architecture/authentication/","title":"Authentication Architecture","text":""},{"location":"architecture/authentication/#multi-tenant-authentication-system","title":"Multi-Tenant Authentication System","text":"<p>easyFlags implements a sophisticated multi-tenant authentication architecture that supports both internal tenant users and external API consumers. This design ensures secure isolation between tenants while enabling flexible integration patterns.</p> <pre><code>flowchart TD\n    %% DEFINE STYLES\n    classDef tenantBox fill:#e3f2fd,stroke:#2196f3,stroke-width:2px,color:black\n    classDef externalBox fill:#e8f5e9,stroke:#4caf50,stroke-width:2px,color:black\n    classDef bridgeBox fill:#fff3e0,stroke:#ff9800,stroke-width:2px,color:black\n    classDef serviceBox fill:#f3e5f5,stroke:#9c27b0,stroke-width:2px,color:black\n    classDef authBox fill:#bbdefb,stroke:#1976d2,color:black\n    classDef roleBox fill:#e3f2fd,stroke:#1976d2,color:black\n    classDef customAuthBox fill:#c8e6c9,stroke:#388e3c,color:black\n    classDef userBox fill:#e8f5e9,stroke:#388e3c,color:black\n    classDef exchangeBox fill:#ffe0b2,stroke:#f57c00,color:black\n    classDef contextBox fill:#ffe0b2,stroke:#f57c00,color:black\n    classDef serviceModuleBox fill:#e1bee7,stroke:#8e24aa,color:black\n\n    %% MAIN TENANT SECTION\n    subgraph TenantUsers[\"Tenant Admin Users (Limited)\"]\n        direction TB\n        TenantAuth[\"JWT Authentication\\n+ API Key Management\"]:::authBox\n\n        subgraph TenantRoles[\"Admin Roles\"]\n            direction LR\n            SuperAdmin[\"Super Admin\"]:::roleBox\n            TenantAdmin[\"Tenant Admin\"]:::roleBox\n            DevUser[\"Developer\"]:::roleBox\n        end\n    end\n\n    %% EXTERNAL USERS SECTION\n    subgraph ExternalUsers[\"API Consumers (Unlimited)\"]\n        direction TB\n        APIAuth[\"API Key Authentication\\n+ SDK Integration\"]:::customAuthBox\n\n        subgraph ExternalRoles[\"Access Levels\"]\n            direction LR\n            ReadOnly[\"Read Only\"]:::userBox\n            ReadWrite[\"Read + Write\"]:::userBox\n            Evaluation[\"Evaluation Only\"]:::userBox\n        end\n    end\n\n    %% AUTHENTICATION BRIDGE\n    subgraph AuthBridge[\"Authentication Bridge\"]\n        direction LR\n        TokenService[\"Token Service\\n(Validates credentials &amp; issues JWTs)\"]:::exchangeBox\n        TenantContext[\"Tenant Context Service\\n(Enforces tenant isolation)\"]:::contextBox\n    end\n\n    %% CORE SERVICES\n    subgraph CoreServices[\"Core easyFlags Services\"]\n        direction TB\n        AuthService[\"Authentication Service\"]:::serviceModuleBox\n        PermissionService[\"Permission Service\"]:::serviceModuleBox\n        FlagService[\"Feature Flag Service\"]:::serviceModuleBox\n        EvalService[\"Evaluation Service\"]:::serviceModuleBox\n    end\n\n    %% CONNECTIONS\n    TenantAuth --&gt; TokenService\n    APIAuth --&gt; TokenService\n    TokenService --&gt; TenantContext\n    TenantContext --&gt; AuthService\n    TenantContext --&gt; PermissionService\n    TenantContext --&gt; FlagService\n    TenantContext --&gt; EvalService\n\n    %% APPLY STYLES\n    TenantUsers:::tenantBox\n    ExternalUsers:::externalBox\n    AuthBridge:::bridgeBox\n    CoreServices:::serviceBox</code></pre>"},{"location":"architecture/authentication/#authentication-flow","title":"Authentication Flow","text":"<p>The diagram above illustrates the multi-tenant authentication architecture of easyFlags. Here's how the system handles authentication:</p> <ol> <li>Tenant Admin Users authenticate using JWT-based authentication with username/password</li> <li>API Consumers authenticate using API keys generated within their tenant context</li> <li>The Token Service validates credentials and issues appropriate JWT tokens</li> <li>The Tenant Context Service enforces tenant boundaries and prevents cross-tenant access</li> <li>Core services enforce permissions based on the authenticated user's role and tenant</li> </ol>"},{"location":"architecture/authentication/#key-components","title":"Key Components","text":""},{"location":"architecture/authentication/#authentication-methods","title":"Authentication Methods","text":"<ul> <li>JWT Authentication: Used primarily for human users accessing the admin interface</li> <li>API Key Authentication: Used for machine-to-machine communication and SDK integration</li> </ul>"},{"location":"architecture/authentication/#user-types-and-roles","title":"User Types and Roles","text":"<ul> <li>Tenant Administrators:</li> <li>Super Admin: Complete access to all tenant resources</li> <li>Tenant Admin: Can manage users and flags within their tenant</li> <li> <p>Developer: Can create and modify flags but has limited administrative capabilities</p> </li> <li> <p>API Consumers:</p> </li> <li>Read Only: Can only view flags and their status</li> <li>Read + Write: Can view and modify flags programmatically</li> <li>Evaluation Only: Limited to flag evaluation operations</li> </ul>"},{"location":"architecture/authentication/#tenant-isolation","title":"Tenant Isolation","text":"<p>The system maintains strict tenant boundaries through:</p> <ol> <li>JWT Claims: All tokens contain tenant identification</li> <li>Tenant Context Middleware: Validates tenant access for every request</li> <li>Database Partitioning: Each tenant's data is logically separated</li> </ol>"},{"location":"architecture/authentication/#permission-enforcement","title":"Permission Enforcement","text":"<p>The Permission Service implements:</p> <ol> <li>Role-based access control</li> <li>Fine-grained permissions (action:resource format)</li> <li>Permission inheritance and delegation</li> <li>Audit logging for security-relevant activities</li> </ol>"},{"location":"architecture/authentication/#integration-patterns","title":"Integration Patterns","text":"<p>easyFlags supports multiple integration patterns for authentication:</p> <ol> <li>Direct Authentication: Using the built-in JWT and API key mechanisms</li> <li>SSO Integration: Support for SAML and OAuth2/OIDC providers</li> <li>Custom Auth Providers: Extensible authentication modules for specialized needs</li> </ol>"},{"location":"architecture/authentication/#security-considerations","title":"Security Considerations","text":"<p>The authentication system implements several security best practices:</p> <ol> <li>Token Expiration: Short-lived access tokens with refresh token capability</li> <li>Key Rotation: Automated and manual API key rotation mechanisms</li> <li>Rate Limiting: Protection against brute-force attacks</li> <li>Audit Trails: Comprehensive logging of authentication events </li> </ol>"},{"location":"best-practices/ab-testing/","title":"A/B Testing","text":"<p>A/B testing (also known as split testing) is a powerful technique for comparing two or more versions of a feature to determine which one performs better. easyFlags provides the infrastructure needed to implement effective A/B tests in your application.</p>"},{"location":"best-practices/ab-testing/#what-is-ab-testing","title":"What is A/B Testing?","text":"<p>A/B testing is an experimentation method that involves:</p> <ol> <li>Creating two or more variations of a feature (A, B, C, etc.)</li> <li>Randomly assigning users to different variations</li> <li>Measuring how each variation affects user behavior</li> <li>Determining which variation performs best based on predefined metrics</li> </ol>"},{"location":"best-practices/ab-testing/#ab-testing-vs-feature-flags","title":"A/B Testing vs. Feature Flags","text":"<p>While both use similar infrastructure, there are key differences:</p> Feature Flags A/B Testing Used to enable/disable features Used to compare different implementations Primarily for deployment control Primarily for data-driven decisions Often temporary Runs until statistical significance achieved Can target specific users Requires random assignment for valid results"},{"location":"best-practices/ab-testing/#implementing-ab-tests-with-easyflags","title":"Implementing A/B Tests with easyFlags","text":"<p>easyFlags makes A/B testing straightforward with its multi-variant flag capabilities and percentage-based targeting.</p>"},{"location":"best-practices/ab-testing/#basic-ab-test-flow","title":"Basic A/B Test Flow","text":"<pre><code>graph TD\n    A[Define Test Hypothesis] --&gt; B[Create Multi-Variant Flag]\n    B --&gt; C[Set Up Analytics Tracking]\n    C --&gt; D[Implement Variations in Code]\n    D --&gt; E[Start Test with Equal Distribution]\n    E --&gt; F[Collect Data]\n    F --&gt; G[Analyze Results]\n    G --&gt; H[Implement Winning Variation]</code></pre>"},{"location":"best-practices/ab-testing/#step-by-step-implementation","title":"Step-by-Step Implementation","text":"<ol> <li>Create a Multi-Variant Flag</li> </ol> <pre><code>const response = await fetch('https://api.easyflags.example.com/feature-flags', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'Checkout Button Test',\n    key: 'checkout-button-test',\n    description: 'A/B test for checkout button color and text',\n    enabled: true,\n    type: 'STRING', // Using STRING type for variant names\n    defaultValue: 'control' // Default variant\n  })\n});\n</code></pre> <ol> <li>Create Targeting Rules for Each Variant</li> </ol> <p>For the \"A\" variant (control):</p> <pre><code>await fetch(`https://api.easyflags.example.com/feature-flags/${flagId}/targeting-rules`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'Variant A (Control)',\n    description: 'Original button design',\n    returnValue: 'control', // Value to return when this rule matches\n    percentage: 50, // 50% of users\n    enabled: true,\n    conditions: [] // Empty conditions apply to all users\n  })\n});\n</code></pre> <p>For the \"B\" variant (test):</p> <pre><code>await fetch(`https://api.easyflags.example.com/feature-flags/${flagId}/targeting-rules`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'Variant B (Test)',\n    description: 'New button design',\n    returnValue: 'variant-b', // Value to return when this rule matches\n    percentage: 50, // 50% of users\n    enabled: true,\n    conditions: [] // Empty conditions apply to all users\n  })\n});\n</code></pre> <ol> <li>Implement Variation Handling in Code</li> </ol> <pre><code>import { useFeatureFlag } from '@easyflags/sdk-react';\n\nfunction CheckoutButton() {\n  // Get the variant assigned to the current user\n  const variant = useFeatureFlag('checkout-button-test', 'control');\n\n  // Track which variant the user sees\n  useEffect(() =&gt; {\n    analytics.track('checkout_button_viewed', {\n      variant: variant,\n      userId: currentUser.id,\n      timestamp: Date.now()\n    });\n  }, [variant]);\n\n  // Render the appropriate button based on the variant\n  if (variant === 'variant-b') {\n    return &lt;Button color=\"green\" size=\"large\"&gt;Complete Purchase Now&lt;/Button&gt;;\n  }\n\n  // Default control variant\n  return &lt;Button color=\"blue\" size=\"medium\"&gt;Checkout&lt;/Button&gt;;\n}\n</code></pre> <ol> <li>Track Conversion Events</li> </ol> <pre><code>function handlePurchaseCompleted() {\n  // Get the variant to include in the conversion event\n  const variant = client.getStringValue('checkout-button-test', 'control', {\n    userId: currentUser.id\n  });\n\n  // Track the conversion event with variant information\n  analytics.track('purchase_completed', {\n    variant: variant,\n    userId: currentUser.id,\n    orderValue: cart.total,\n    timestamp: Date.now()\n  });\n\n  // Continue with checkout process\n  navigateToConfirmation();\n}\n</code></pre>"},{"location":"best-practices/ab-testing/#multi-variate-testing","title":"Multi-Variate Testing","text":"<p>For testing more than two variations:</p> <pre><code>// Create three variants with equal distribution\nconst variants = [\n  { name: 'Control', returnValue: 'control', percentage: 33 },\n  { name: 'Variant B', returnValue: 'variant-b', percentage: 33 },\n  { name: 'Variant C', returnValue: 'variant-c', percentage: 34 }\n];\n\n// Create a targeting rule for each variant\nfor (const variant of variants) {\n  await createTargetingRule(flagId, {\n    name: variant.name,\n    returnValue: variant.returnValue,\n    percentage: variant.percentage,\n    conditions: [] // Apply to all users\n  });\n}\n</code></pre>"},{"location":"best-practices/ab-testing/#best-practices-for-ab-testing","title":"Best Practices for A/B Testing","text":""},{"location":"best-practices/ab-testing/#1-define-clear-hypotheses","title":"1. Define Clear Hypotheses","text":"<p>Start with a clear, testable hypothesis:</p> <p>\"Changing the checkout button from blue to green will increase conversion rate by at least 5%\"</p>"},{"location":"best-practices/ab-testing/#2-ensure-random-assignment","title":"2. Ensure Random Assignment","text":"<p>For valid results, users must be randomly assigned to variations:</p> <ul> <li>Use persistent user IDs for consistent experience</li> <li>Ensure equal distribution between variants (easyFlags handles this)</li> <li>Avoid selection bias by not letting users choose their variant</li> </ul>"},{"location":"best-practices/ab-testing/#3-calculate-sample-size-in-advance","title":"3. Calculate Sample Size in Advance","text":"<p>Determine how many users you need for statistical significance:</p> <pre><code>function calculateRequiredSampleSize(baselineConversionRate, minimumDetectableEffect, significance = 0.05, power = 0.8) {\n  // Statistical calculation to determine required users per variation\n  // ...\n  return usersPerVariation;\n}\n\nconst requiredUsers = calculateRequiredSampleSize(\n  0.15, // Current conversion rate (15%)\n  0.05, // Minimum effect size to detect (5%)\n  0.05, // Significance level (5%)\n  0.8   // Statistical power (80%)\n);\n\nconsole.log(`Need ${requiredUsers} users per variant`);\n</code></pre>"},{"location":"best-practices/ab-testing/#4-run-tests-for-sufficient-duration","title":"4. Run Tests for Sufficient Duration","text":"<ul> <li>Run tests for at least one full business cycle (typically 2-4 weeks)</li> <li>Avoid stopping tests early based on initial results (can lead to false positives)</li> <li>Account for weekday/weekend variations in user behavior</li> </ul>"},{"location":"best-practices/ab-testing/#5-track-the-right-metrics","title":"5. Track the Right Metrics","text":"<p>For each test, define:</p> <ul> <li>Primary Metric: The main success measure (e.g., conversion rate)</li> <li>Secondary Metrics: Additional success measures (e.g., average order value)</li> <li>Guardrail Metrics: Metrics that shouldn't decrease (e.g., overall revenue)</li> </ul>"},{"location":"best-practices/ab-testing/#6-analyze-results-correctly","title":"6. Analyze Results Correctly","text":"<p>Use proper statistical methods to evaluate results:</p> <pre><code>function calculateStatisticalSignificance(\n  controlVisitors, controlConversions,\n  variantVisitors, variantConversions\n) {\n  // Calculate conversion rates\n  const controlConversionRate = controlConversions / controlVisitors;\n  const variantConversionRate = variantConversions / variantVisitors;\n\n  // Calculate z-score\n  // ...\n\n  // Calculate p-value\n  // ...\n\n  return {\n    controlConversionRate,\n    variantConversionRate,\n    improvement: (variantConversionRate - controlConversionRate) / controlConversionRate,\n    pValue,\n    isSignificant: pValue &lt; 0.05\n  };\n}\n</code></pre>"},{"location":"best-practices/ab-testing/#7-implement-the-winner-and-document-learnings","title":"7. Implement the Winner and Document Learnings","text":"<p>After the test:</p> <ul> <li>Implement the winning variation for all users</li> <li>Document what you learned</li> <li>Share results with stakeholders</li> <li>Plan follow-up tests based on insights</li> </ul>"},{"location":"best-practices/ab-testing/#common-ab-testing-pitfalls","title":"Common A/B Testing Pitfalls","text":"Pitfall Solution Testing too many variations Limit to 2-4 variations per test Changing variations mid-test Lock variations until the test concludes Testing minor changes Focus on changes likely to have measurable impact Multiple overlapping tests Use mutually exclusive tests or factorial design Ignoring statistical significance Wait for sufficient data before concluding"},{"location":"best-practices/ab-testing/#ab-testing-frameworks-and-tools","title":"A/B Testing Frameworks and Tools","text":"<p>easyFlags integrates well with these popular A/B testing analytics tools:</p> <ul> <li>Google Analytics</li> <li>Mixpanel</li> <li>Amplitude</li> <li>Segment</li> <li>GrowthBook (for statistical analysis)</li> </ul>"},{"location":"best-practices/ab-testing/#conclusion","title":"Conclusion","text":"<p>A/B testing is a powerful method for making data-driven decisions about your product. With easyFlags providing the infrastructure and following these best practices, you can run effective A/B tests that lead to measurable improvements in your key metrics. </p>"},{"location":"best-practices/gradual-rollouts/","title":"Gradual Rollouts","text":"<p>Gradual rollouts are a key feature flag pattern that allows you to release new features to users incrementally, reducing risk and enabling quick rollbacks if issues arise.</p>"},{"location":"best-practices/gradual-rollouts/#what-is-a-gradual-rollout","title":"What is a Gradual Rollout?","text":"<p>A gradual rollout is the process of releasing a feature to a small percentage of users first, then incrementally increasing the percentage until the feature is available to everyone. This approach:</p> <ul> <li>Reduces risk by limiting the impact of bugs</li> <li>Allows for monitoring system health during rollout</li> <li>Enables gathering user feedback early</li> <li>Provides ability to roll back quickly if issues arise</li> </ul>"},{"location":"best-practices/gradual-rollouts/#implementing-gradual-rollouts-with-easyflags","title":"Implementing Gradual Rollouts with easyFlags","text":"<p>easyFlags makes implementing gradual rollouts straightforward through its percentage rollout capability in targeting rules.</p>"},{"location":"best-practices/gradual-rollouts/#basic-gradual-rollout-pattern","title":"Basic Gradual Rollout Pattern","text":"<pre><code>graph TD\n    A[Create Feature Flag] --&gt; B[Create Targeting Rule]\n    B --&gt; C[Set Initial Percentage]\n    C --&gt; D[Monitor &amp; Gather Feedback]\n    D --&gt; E{Issues Found?}\n    E --&gt;|Yes| F[Roll Back]\n    E --&gt;|No| G[Increase Percentage]\n    G --&gt; H{100% Reached?}\n    H --&gt;|No| D\n    H --&gt;|Yes| I[Feature Fully Released]</code></pre>"},{"location":"best-practices/gradual-rollouts/#step-by-step-implementation","title":"Step-by-Step Implementation","text":"<ol> <li>Create a Feature Flag</li> </ol> <p>Start by creating a feature flag for the new functionality:</p> <pre><code>const response = await fetch('https://api.easyflags.example.com/feature-flags', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'New Search Algorithm',\n    key: 'new-search-algorithm',\n    description: 'Enables the new search algorithm with improved relevance',\n    enabled: true\n  })\n});\n</code></pre> <ol> <li>Create a Targeting Rule with Initial Percentage</li> </ol> <p>Create a targeting rule that applies to all users but with a small initial percentage:</p> <pre><code>const response = await fetch(`https://api.easyflags.example.com/feature-flags/${flagId}/targeting-rules`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    name: 'Gradual Rollout',\n    description: 'Percentage-based rollout for all users',\n    percentage: 5, // Start with just 5% of users\n    enabled: true,\n    conditions: [] // Empty array means this applies to all users\n  })\n});\n</code></pre> <ol> <li>Monitor the Feature</li> </ol> <p>Monitor metrics, error rates, and user feedback for users with the feature enabled.</p> <ol> <li>Incrementally Increase the Percentage</li> </ol> <p>As confidence grows, gradually increase the percentage:</p> <pre><code>const response = await fetch(`https://api.easyflags.example.com/feature-flags/${flagId}/targeting-rules/${ruleId}`, {\n  method: 'PATCH',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    'x-tenant-id': 'YOUR_TENANT_ID'\n  },\n  body: JSON.stringify({\n    percentage: 20 // Increase to 20%\n  })\n});\n</code></pre> <ol> <li>Repeat Until Full Rollout</li> </ol> <p>Continue increasing the percentage (20% \u2192 50% \u2192 100%) as confidence grows.</p>"},{"location":"best-practices/gradual-rollouts/#advanced-gradual-rollout-strategies","title":"Advanced Gradual Rollout Strategies","text":""},{"location":"best-practices/gradual-rollouts/#phased-rollout","title":"Phased Rollout","text":"<p>A more sophisticated approach is to roll out to specific user groups in phases:</p> <pre><code>graph TD\n    A[Create Feature Flag] --&gt; B[Internal Users 100%]\n    B --&gt; C[Beta Users 50%]\n    C --&gt; D[Regional Users 100%]\n    D --&gt; E[All Users 20%]\n    E --&gt; F[All Users 50%]\n    F --&gt; G[All Users 100%]</code></pre>"},{"location":"best-practices/gradual-rollouts/#implementation","title":"Implementation:","text":"<ol> <li>Internal Users First</li> </ol> <pre><code>// Rule for internal employees (100%)\nawait createRule({\n  name: 'Internal Users',\n  conditions: [{ attribute: 'email', operator: 'ENDS_WITH', value: '@ourcompany.com' }],\n  percentage: 100\n});\n</code></pre> <ol> <li>Beta Program Users</li> </ol> <pre><code>// Rule for beta users (50%)\nawait createRule({\n  name: 'Beta Users',\n  conditions: [{ attribute: 'userGroup', operator: 'EQUALS', value: 'beta' }],\n  percentage: 50\n});\n</code></pre> <ol> <li>Regional Rollout</li> </ol> <pre><code>// Rule for specific regions (100%)\nawait createRule({\n  name: 'US Region',\n  conditions: [{ attribute: 'location.country', operator: 'EQUALS', value: 'US' }],\n  percentage: 100\n});\n</code></pre> <ol> <li>Global Gradual Rollout</li> </ol> <pre><code>// Default rule for all other users (start at 20%)\nawait createRule({\n  name: 'Global Rollout',\n  conditions: [],\n  percentage: 20\n});\n</code></pre>"},{"location":"best-practices/gradual-rollouts/#ring-deployment-model","title":"Ring Deployment Model","text":"<p>A \"ring deployment\" model gradually expands the audience in concentric circles:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Production - All Users (Ring 4)       \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502 Early Adopters (Ring 3)           \u2502 \u2502\n\u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502\n\u2502 \u2502 \u2502 Beta Users (Ring 2)           \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2502 Internal Users (Ring 1)   \u2502 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502\n\u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"best-practices/gradual-rollouts/#best-practices-for-gradual-rollouts","title":"Best Practices for Gradual Rollouts","text":"<ol> <li> <p>Start small: Begin with 1-5% of users to minimize impact of potential issues</p> </li> <li> <p>Use consistent user bucketing: easyFlags ensures users consistently get the same experience by using deterministic hashing for the percentage calculation</p> </li> <li> <p>Define clear rollout stages: Create a rollout plan with specific percentage targets and timeframes</p> </li> <li> <p>Monitor key metrics: Track error rates, performance metrics, and user feedback at each stage</p> </li> <li> <p>Have a rollback plan: Be prepared to disable the feature flag quickly if issues arise</p> </li> <li> <p>Consider user segmentation: Roll out to less critical segments first (internal users, beta testers)</p> </li> <li> <p>Communicate with stakeholders: Keep everyone informed about the rollout progress</p> </li> <li> <p>Automate when possible: Use scheduled flag changes for automatic percentage increases:</p> </li> </ol> <pre><code>await fetch(`https://api.easyflags.example.com/feature-flags/${flagId}/scheduled-changes`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN'\n  },\n  body: JSON.stringify({\n    scheduledTime: '2023-06-15T14:00:00Z',\n    changes: {\n      ruleId: 'r8c3de3d-1fea-4d7c-a8b0-29f63c4c3454',\n      percentage: 50\n    }\n  })\n});\n</code></pre>"},{"location":"best-practices/gradual-rollouts/#gradual-rollout-checklist","title":"Gradual Rollout Checklist","text":"<ul> <li> Feature flag created and enabled</li> <li> Initial targeting rule with small percentage (1-5%) created</li> <li> Monitoring set up for key metrics</li> <li> Rollout plan with percentage targets and timeline defined</li> <li> Rollback plan documented</li> <li> Communication plan established</li> <li> Success criteria defined</li> </ul>"},{"location":"best-practices/gradual-rollouts/#common-challenges-and-solutions","title":"Common Challenges and Solutions","text":"Challenge Solution Inconsistent user experience Use persistent user IDs for percentage calculations Monitoring only new code path Track metrics for both old and new code paths Manual percentage updates Use scheduled changes for automated rollouts Stuck at partial rollout Set a target date for 100% rollout or feature decision Percentage calculations seem random Ensure using consistent hashing (easyFlags handles this automatically)"},{"location":"best-practices/gradual-rollouts/#conclusion","title":"Conclusion","text":"<p>Gradual rollouts are a powerful pattern for reducing risk and ensuring smooth feature releases. easyFlags makes this process straightforward with its percentage-based targeting rules and consistent user bucketing. By following the best practices outlined in this guide, you can confidently release new features to your users with minimal risk. </p>"},{"location":"getting-started/","title":"Overview","text":"<p>Welcome to easyFlags! This guide will help you get up and running with our high-performance feature flag service.</p>"},{"location":"getting-started/#what-are-feature-flags","title":"What are Feature Flags?","text":"<p>Feature flags (also known as feature toggles or feature switches) are a software development technique that allows you to enable or disable functionality without deploying new code. They decouple feature release from code deployment, giving you greater control over the full lifecycle of features.</p>"},{"location":"getting-started/#why-easyflags","title":"Why easyFlags?","text":"<p>easyFlags is designed for high-performance environments where every millisecond counts:</p> <ul> <li>Ultra-fast evaluation: Sub-10ms response times</li> <li>Highly scalable: Designed to handle millions of evaluations per second</li> <li>Real-time updates: Changes propagate instantly via WebSockets</li> <li>Sophisticated targeting: Target users based on attributes with powerful rules</li> <li>Multi-tenant architecture: Securely isolate teams and environments</li> </ul>"},{"location":"getting-started/#integration-steps","title":"Integration Steps","text":"<p>Getting started with easyFlags is simple:</p> <ol> <li>Setup an Account: Sign up for easyFlags</li> <li>Create a Project: Set up your first project and environments</li> <li>Create Feature Flags: Define your first feature flags</li> <li>Install the SDK: Choose from our client libraries for various platforms</li> <li>Implement in Your Code: Start using feature flags in your application</li> </ol>"},{"location":"getting-started/#quick-example","title":"Quick Example","text":"<p>Here's how simple it is to use easyFlags with our JavaScript SDK:</p> <pre><code>// Install the SDK\n// npm install @easyflags/sdk-js\n\n// Initialize the client\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key'\n});\n\n// Check if a feature is enabled\nconst isEnabled = await client.getBooleanValue(\n  'new-feature',  // Flag key\n  false,          // Default value\n  {               // User context for targeting\n    userId: 'user-123',\n    userRole: 'premium'\n  }\n);\n\n// Use the flag value\nif (isEnabled) {\n  // Show the new feature\n} else {\n  // Show the existing experience\n}\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Ready to dive deeper?</p> <ul> <li>Follow our Quick Start Guide for a hands-on tutorial</li> <li>Learn about our REST API for direct integration</li> <li>Explore SDK options for your platform</li> <li>Understand best practices for feature flags</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you set up and start using easyFlags in your application in just a few minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>An easyFlags account</li> <li>Your API key</li> <li>Your application codebase ready for integration</li> </ul>"},{"location":"getting-started/quick-start/#step-1-install-the-sdk","title":"Step 1: Install the SDK","text":"<p>Choose the SDK for your platform and install it:</p> JavaScript/TypeScriptReactNode.jsPython <pre><code>npm install @easyflags/sdk-js\n</code></pre> <pre><code>npm install @easyflags/sdk-react\n</code></pre> <pre><code>npm install @easyflags/sdk-node\n</code></pre> <pre><code>pip install easyflags-sdk\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-initialize-the-client","title":"Step 2: Initialize the Client","text":"<p>Initialize the easyFlags client in your application:</p> JavaScript/TypeScriptReactNode.jsPython <pre><code>import { FeatureFlagClient } from '@easyflags/sdk-js';\n\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  streaming: true // Enable WebSocket for real-time updates\n});\n\n// Initialize the client\nawait client.initialize();\n</code></pre> <pre><code>import { FeatureFlagProvider } from '@easyflags/sdk-react';\n\nfunction App() {\n  return (\n    &lt;FeatureFlagProvider\n      apiUrl=\"https://api.easyflags.example.com\"\n      apiKey=\"your-api-key\"\n    &gt;\n      &lt;YourApplication /&gt;\n    &lt;/FeatureFlagProvider&gt;\n  );\n}\n</code></pre> <pre><code>const { FeatureFlagClient } = require('@easyflags/sdk-node');\n\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  localEvaluation: true // Enable local evaluation for faster performance\n});\n\n// Initialize the client\nawait client.initialize();\n</code></pre> <pre><code>from easyflags import FeatureFlagClient\n\nclient = FeatureFlagClient(\n    api_url=\"https://api.easyflags.example.com\",\n    api_key=\"your-api-key\",\n    streaming=True\n)\n\n# Initialize the client\nawait client.initialize()\n</code></pre>"},{"location":"getting-started/quick-start/#step-3-create-a-feature-flag","title":"Step 3: Create a Feature Flag","text":"<p>Create a feature flag in the easyFlags dashboard:</p> <ol> <li>Log in to your easyFlags dashboard</li> <li>Navigate to your project</li> <li>Click \"Create Flag\"</li> <li>Set the following properties:</li> <li>Key: <code>new-feature</code> (used in code to reference this flag)</li> <li>Name: \"New Feature\"</li> <li>Description: \"Enables the new feature in our application\"</li> <li>Type: Boolean</li> <li>Default Value: false</li> </ol>"},{"location":"getting-started/quick-start/#step-4-use-the-feature-flag","title":"Step 4: Use the Feature Flag","text":"<p>Now use the feature flag in your code:</p> JavaScript/TypeScriptReactNode.jsPython <pre><code>// Create a user context\nconst context = {\n  userId: 'user-123',\n  userRole: 'premium',\n  location: {\n    country: 'US'\n  }\n};\n\n// Evaluate the flag\nconst isEnabled = await client.getBooleanValue(\n  'new-feature', // The flag key\n  false,         // Default value if flag not found\n  context        // The user context\n);\n\n// Use the flag value\nif (isEnabled) {\n  // Show the new feature\n  showNewFeature();\n} else {\n  // Show the existing experience\n  showExistingExperience();\n}\n</code></pre> <pre><code>import { useBooleanFlag } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  const isNewFeatureEnabled = useBooleanFlag(\n    'new-feature',\n    false,\n    { userId: 'user-123', userRole: 'premium' }\n  );\n\n  return (\n    &lt;div&gt;\n      {isNewFeatureEnabled ? (\n        &lt;NewFeatureComponent /&gt;\n      ) : (\n        &lt;ExistingComponent /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre> <pre><code>// Create a user context\nconst context = {\n  userId: 'user-123',\n  userRole: 'admin',\n  location: {\n    country: 'US'\n  }\n};\n\n// Evaluate the flag\nconst isEnabled = await client.getBooleanValue(\n  'new-feature',\n  false,\n  context\n);\n\n// Use the flag value\nif (isEnabled) {\n  return newApiResponse();\n} else {\n  return existingApiResponse();\n}\n</code></pre> <pre><code># Create a user context\ncontext = {\n    \"userId\": \"user-123\",\n    \"userRole\": \"premium\",\n    \"location\": {\n        \"country\": \"US\"\n    }\n}\n\n# Evaluate the flag\nis_enabled = await client.get_boolean_value(\n    \"new-feature\",\n    False,\n    context\n)\n\n# Use the flag value\nif is_enabled:\n    # Show the new feature\n    show_new_feature()\nelse:\n    # Show the existing experience\n    show_existing_experience()\n</code></pre>"},{"location":"getting-started/quick-start/#step-5-test-the-feature-flag","title":"Step 5: Test the Feature Flag","text":"<p>To test your feature flag:</p> <ol> <li>In the easyFlags dashboard, toggle the flag on for a specific target audience</li> <li>For example, enable it only for users with the role \"premium\"</li> <li>Test your application with different user contexts to verify the flag behaves as expected</li> </ol>"},{"location":"getting-started/quick-start/#step-6-implement-targeting-rules","title":"Step 6: Implement Targeting Rules","text":"<p>Configure advanced targeting rules:</p> <ol> <li>In the dashboard, navigate to your flag</li> <li>Add a targeting rule:</li> <li>Name: \"Premium Users\"</li> <li>Rule: <code>userRole = \"premium\"</code></li> <li>Serve: true (enabled)</li> <li>Add another rule:</li> <li>Name: \"US Beta Testers\"</li> <li>Rule: <code>location.country = \"US\" AND userTags CONTAINS \"beta-tester\"</code></li> <li>Serve: true (enabled)</li> <li>Set the default rule to serve \"false\" (disabled) for everyone else</li> </ol>"},{"location":"getting-started/quick-start/#step-7-enable-percentage-rollout","title":"Step 7: Enable Percentage Rollout","text":"<p>For gradual rollout:</p> <ol> <li>Edit your flag settings</li> <li>For a specific rule, set a percentage rollout:</li> <li>Rule: <code>true</code> (matches everyone)</li> <li>Percentage: 10%</li> <li>This enables the feature for only 10% of users</li> <li>Increase the percentage over time to gradually roll out to more users</li> </ol>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Congratulations! You've successfully integrated easyFlags into your application. To learn more:</p> <ul> <li>Explore SDK documentation for advanced features</li> <li>Learn about targeting rules</li> <li>Set up real-time updates</li> <li>Implement A/B testing </li> </ul>"},{"location":"sdk/","title":"SDK Integration","text":"<p>easyFlags provides Software Development Kits (SDKs) for multiple languages and frameworks to make integrating feature flags into your applications as seamless as possible.</p>"},{"location":"sdk/#available-sdks","title":"Available SDKs","text":"<p>easyFlags provides the following SDKs:</p> SDK Platform Status Documentation JavaScript Browser, Node.js Stable JavaScript SDK React Browser Stable React SDK Node.js Server Stable Node.js SDK Python Server Beta Python SDK Java Server Beta Coming soon Go Server Beta Coming soon .NET Server Planning Coming soon Ruby Server Planning Coming soon"},{"location":"sdk/#core-concepts","title":"Core Concepts","text":"<p>All SDKs follow similar patterns and concepts, making it easy to use easyFlags across your technology stack.</p>"},{"location":"sdk/#client-initialization","title":"Client Initialization","text":"<p>Each SDK provides a client that needs to be initialized with your API key and configuration:</p> <pre><code>// JavaScript example\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  tenantId: 'your-tenant-id' // Optional for multi-tenant setups\n});\n\nawait client.initialize(); // Load flag configurations\n</code></pre>"},{"location":"sdk/#flag-evaluation","title":"Flag Evaluation","text":"<p>SDKs provide methods to check if a feature is enabled:</p> <pre><code>// Check boolean flag\nconst isEnabled = await client.getBooleanValue(\n  'new-feature',   // Flag key\n  false,           // Default value\n  { userId: '123' } // Context\n);\n\n// Get string variation\nconst theme = await client.getStringValue(\n  'theme',        // Flag key\n  'default',      // Default value \n  { userId: '123' } // Context\n);\n</code></pre>"},{"location":"sdk/#evaluation-context","title":"Evaluation Context","text":"<p>The context object contains information about the current user and environment that determines which variation they should receive:</p> <pre><code>const context = {\n  userId: 'user-123',            // Unique user identifier\n  userRole: 'premium',           // User role or permissions\n  location: {                    // Nested attributes\n    country: 'US',\n    region: 'West'\n  },\n  deviceType: 'mobile',          // Device information\n  appVersion: '2.1.0'            // Application version\n};\n</code></pre>"},{"location":"sdk/#caching","title":"Caching","text":"<p>SDKs implement multi-level caching to ensure optimal performance:</p> <ol> <li>In-memory cache: For ultra-fast lookups (sub-millisecond)</li> <li>Local storage: For persistence across page reloads (browser SDKs)</li> <li>Background synchronization: To keep flags up-to-date</li> </ol>"},{"location":"sdk/#real-time-updates","title":"Real-time Updates","text":"<p>All SDKs support real-time updates via WebSockets:</p> <pre><code>// Subscribe to changes for a specific flag\nconst unsubscribe = client.subscribe('new-feature', (newValue) =&gt; {\n  console.log('Feature flag changed:', newValue);\n  // Update UI or application state\n});\n\n// Later, unsubscribe when no longer needed\nunsubscribe();\n</code></pre>"},{"location":"sdk/#sdk-architecture","title":"SDK Architecture","text":"<pre><code>classDiagram\n    class Client {\n        +initialize()\n        +getBooleanValue(key, defaultValue, context)\n        +getStringValue(key, defaultValue, context)\n        +getNumberValue(key, defaultValue, context)\n        +getJsonValue(key, defaultValue, context)\n        +subscribe(key, callback)\n    }\n\n    class Cache {\n        -flags\n        -evaluations\n        +get(key, context)\n        +set(key, context, value)\n        +invalidate(key)\n    }\n\n    class ApiClient {\n        +getAllFlags()\n        +getFlag(key)\n        +evaluateFlag(key, context)\n    }\n\n    class Evaluator {\n        +evaluate(flag, context)\n    }\n\n    class WebSocketManager {\n        +connect()\n        +disconnect()\n        +subscribe(key, callback)\n    }\n\n    Client --&gt; Cache\n    Client --&gt; ApiClient\n    Client --&gt; Evaluator\n    Client --&gt; WebSocketManager</code></pre>"},{"location":"sdk/#sdk-best-practices","title":"SDK Best Practices","text":""},{"location":"sdk/#1-initialize-early","title":"1. Initialize Early","text":"<p>Initialize the SDK as early as possible in your application lifecycle to preload flag data:</p> <pre><code>// React example\nfunction App() {\n  const [isInitialized, setIsInitialized] = useState(false);\n\n  useEffect(() =&gt; {\n    // Initialize on app start\n    client.initialize()\n      .then(() =&gt; setIsInitialized(true))\n      .catch(err =&gt; console.error('Failed to initialize flags', err));\n  }, []);\n\n  if (!isInitialized) {\n    return &lt;LoadingIndicator /&gt;;\n  }\n\n  return &lt;YourApp /&gt;;\n}\n</code></pre>"},{"location":"sdk/#2-reuse-context-objects","title":"2. Reuse Context Objects","text":"<p>Create context objects once and reuse them for multiple flag checks to improve performance:</p> <pre><code>// Create context once\nconst context = {\n  userId: user.id,\n  userRole: user.role,\n  location: user.location\n};\n\n// Use for multiple evaluations\nconst isFeatureAEnabled = await client.getBooleanValue('feature-a', false, context);\nconst isFeatureBEnabled = await client.getBooleanValue('feature-b', false, context);\n</code></pre>"},{"location":"sdk/#3-handle-default-values-properly","title":"3. Handle Default Values Properly","text":"<p>Always provide sensible default values that will be used if:</p> <ul> <li>The SDK hasn't initialized yet</li> <li>The network request fails</li> <li>The flag doesn't exist</li> <li>An error occurs during evaluation</li> </ul> <pre><code>// Provide meaningful defaults\nconst theme = await client.getStringValue('theme', 'light', context);\nconst maxItems = await client.getNumberValue('max-items', 10, context);\n</code></pre>"},{"location":"sdk/#4-clean-up-subscriptions","title":"4. Clean Up Subscriptions","text":"<p>When using the subscription API, always clean up subscriptions when components unmount:</p> <pre><code>// React example\nuseEffect(() =&gt; {\n  // Subscribe to changes\n  const unsubscribe = client.subscribe('feature', (value) =&gt; {\n    setFeatureEnabled(value);\n  });\n\n  // Clean up on unmount\n  return () =&gt; unsubscribe();\n}, []);\n</code></pre>"},{"location":"sdk/#5-use-type-specific-methods","title":"5. Use Type-Specific Methods","text":"<p>Use the appropriate type-specific methods for different flag types:</p> <pre><code>// Boolean flags\nconst isEnabled = await client.getBooleanValue('feature', false, context);\n\n// String flags\nconst theme = await client.getStringValue('theme', 'light', context);\n\n// Number flags\nconst limit = await client.getNumberValue('limit', 10, context);\n\n// JSON flags\nconst config = await client.getJsonValue('config', { timeout: 1000 }, context);\n</code></pre>"},{"location":"sdk/#offline-support","title":"Offline Support","text":"<p>easyFlags SDKs provide offline support through local caching:</p> <pre><code>// Initialize with offline support enabled\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  offlineSupport: true, // Enable offline support\n  cacheOptions: {\n    persistToLocalStorage: true, // Enable local storage\n    ttl: 3600000 // Cache TTL in milliseconds (1 hour)\n  }\n});\n\n// Initialize once online\nawait client.initialize();\n\n// Later, even if offline, flags can still be evaluated\nconst isEnabled = await client.getBooleanValue('feature', false, context);\n</code></pre>"},{"location":"sdk/#next-steps","title":"Next Steps","text":"<p>Choose your platform-specific SDK documentation to get started:</p> <ul> <li>JavaScript SDK - For browser and Node.js applications</li> <li>React SDK - For React applications</li> <li>Node.js SDK - Optimized for server-side Node.js applications</li> <li>Python SDK - For Python applications</li> </ul>"},{"location":"sdk/javascript/","title":"JavaScript SDK","text":"<p>The easyFlags JavaScript SDK provides a client-side implementation for evaluating feature flags in browser and Node.js environments.</p>"},{"location":"sdk/javascript/#installation","title":"Installation","text":"npmyarnpnpm <pre><code>npm install @easyflags/sdk-js\n</code></pre> <pre><code>yarn add @easyflags/sdk-js\n</code></pre> <pre><code>pnpm add @easyflags/sdk-js\n</code></pre>"},{"location":"sdk/javascript/#initialization","title":"Initialization","text":"<pre><code>import { FeatureFlagClient } from '@easyflags/sdk-js';\n\n// Initialize the client\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  tenantId: 'your-tenant-id', // Optional, for multi-tenant installations\n  streaming: true, // Enable WebSocket for real-time updates (default: true)\n  cacheOptions: {\n    persistToLocalStorage: true, // Enable local storage caching (default: true)\n    ttl: 60000 // Cache TTL in milliseconds (default: 60000)\n  }\n});\n\n// Initialize the client by fetching flags\nawait client.initialize();\n</code></pre>"},{"location":"sdk/javascript/#basic-usage","title":"Basic Usage","text":""},{"location":"sdk/javascript/#boolean-flags","title":"Boolean Flags","text":"<pre><code>// Check if a feature is enabled\nconst isEnabled = await client.getBooleanValue(\n  'new-feature', // Flag key\n  false,         // Default value if flag not found\n  {              // Context object for evaluation\n    userId: 'user-123',\n    userRole: 'premium',\n    location: {\n      country: 'US'\n    }\n  }\n);\n\nif (isEnabled) {\n  // Feature is enabled\n} else {\n  // Feature is disabled\n}\n</code></pre>"},{"location":"sdk/javascript/#string-flags","title":"String Flags","text":"<pre><code>// Get string variation\nconst theme = await client.getStringValue(\n  'theme',\n  'default',\n  { userId: 'user-123' }\n);\n\n// Use the theme value\ndocument.body.className = theme;\n</code></pre>"},{"location":"sdk/javascript/#number-flags","title":"Number Flags","text":"<pre><code>// Get number variation\nconst maxItems = await client.getNumberValue(\n  'max-items-per-page',\n  10,\n  { userId: 'user-123' }\n);\n\n// Use the number value\nfetchItems({ limit: maxItems });\n</code></pre>"},{"location":"sdk/javascript/#json-flags","title":"JSON Flags","text":"<pre><code>// Get JSON variation\nconst config = await client.getJsonValue(\n  'feature-config',\n  { enabled: false, maxRetries: 3 },\n  { userId: 'user-123' }\n);\n\n// Use the configuration\nsetupFeature(config);\n</code></pre>"},{"location":"sdk/javascript/#subscribing-to-flag-changes","title":"Subscribing to Flag Changes","text":"<p>The SDK supports real-time updates via WebSockets. You can subscribe to flag changes:</p> <pre><code>// Subscribe to a flag\nconst unsubscribe = client.subscribe('new-feature', (value) =&gt; {\n  console.log('Flag value changed:', value);\n  // Update your UI or application state\n});\n\n// Later, unsubscribe when no longer needed\nunsubscribe();\n</code></pre>"},{"location":"sdk/javascript/#batch-evaluation","title":"Batch Evaluation","text":"<p>For optimized performance, you can evaluate multiple flags at once:</p> <pre><code>// Evaluate multiple flags\nconst results = await client.batchEvaluate(\n  ['new-feature', 'another-feature', 'third-feature'],\n  { userId: 'user-123', userRole: 'premium' }\n);\n\n// Use the results\nif (results['new-feature']) {\n  // New feature is enabled\n}\n\nif (results['another-feature']) {\n  // Another feature is enabled\n}\n</code></pre>"},{"location":"sdk/javascript/#error-handling","title":"Error Handling","text":"<pre><code>try {\n  const isEnabled = await client.getBooleanValue('new-feature', false, context);\n  // Use the flag value\n} catch (error) {\n  console.error('Failed to evaluate flag:', error);\n  // Fall back to default behavior\n}\n</code></pre>"},{"location":"sdk/javascript/#performance-optimization","title":"Performance Optimization","text":""},{"location":"sdk/javascript/#reusing-context","title":"Reusing Context","text":"<p>To optimize performance, reuse the same context object for multiple evaluations:</p> <pre><code>// Create a context once\nconst context = {\n  userId: user.id,\n  userRole: user.role,\n  location: {\n    country: user.country\n  }\n};\n\n// Use it for multiple evaluations\nconst isFeatureAEnabled = await client.getBooleanValue('feature-a', false, context);\nconst isFeatureBEnabled = await client.getBooleanValue('feature-b', false, context);\n</code></pre>"},{"location":"sdk/javascript/#pre-fetching-flags","title":"Pre-fetching Flags","text":"<p>For optimal performance, initialize the client early in your application lifecycle to pre-fetch flags:</p> <pre><code>// During app initialization\nawait client.initialize();\n\n// Later when flags are needed, they'll already be cached\nconst isEnabled = await client.getBooleanValue('new-feature', false, context);\n</code></pre>"},{"location":"sdk/javascript/#offline-support","title":"Offline Support","text":"<p>The SDK supports offline mode through local storage caching:</p> <pre><code>// Configure offline support\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  cacheOptions: {\n    persistToLocalStorage: true,\n    ttl: 3600000 // 1 hour\n  }\n});\n\n// Initialize once online\nawait client.initialize();\n\n// Later, even if offline, flags can still be evaluated\nconst isEnabled = await client.getBooleanValue('new-feature', false, context);\n</code></pre>"},{"location":"sdk/javascript/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"sdk/javascript/#custom-cache-keys","title":"Custom Cache Keys","text":"<pre><code>const client = new FeatureFlagClient({\n  // ... other options\n  cacheOptions: {\n    generateCacheKey: (flagKey, context) =&gt; {\n      // Custom cache key generation logic\n      return `${flagKey}:${context.userId || 'anonymous'}`;\n    }\n  }\n});\n</code></pre>"},{"location":"sdk/javascript/#event-handling","title":"Event Handling","text":"<pre><code>// Listen to evaluation events\nclient.on('evaluation', (event) =&gt; {\n  console.log('Flag evaluated:', event.key, 'Result:', event.value);\n});\n\n// Listen to error events\nclient.on('error', (error) =&gt; {\n  console.error('SDK error:', error);\n});\n\n// Listen to ready event\nclient.on('ready', () =&gt; {\n  console.log('SDK is ready to use');\n});\n</code></pre>"},{"location":"sdk/javascript/#sdk-architecture","title":"SDK Architecture","text":"<pre><code>classDiagram\n    class FeatureFlagClient {\n        -FlagCache cache\n        -ApiClient api\n        -WebSocket socket\n        +initialize()\n        +getBooleanValue(key, defaultValue, context)\n        +getStringValue(key, defaultValue, context)\n        +getNumberValue(key, defaultValue, context)\n        +getJsonValue(key, defaultValue, context)\n        +subscribe(key, callback)\n        +on(event, callback)\n    }\n\n    class FlagCache {\n        -Map flags\n        -Map evaluations\n        +get(key)\n        +set(key, value)\n        +invalidate(key)\n    }\n\n    class ApiClient {\n        +getAllFlags()\n        +getFlag(key)\n        +evaluateFlag(key, context)\n    }\n\n    FeatureFlagClient --&gt; FlagCache\n    FeatureFlagClient --&gt; ApiClient</code></pre>"},{"location":"sdk/javascript/#full-example","title":"Full Example","text":"<pre><code>import { FeatureFlagClient } from '@easyflags/sdk-js';\n\n// Initialize client\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  streaming: true,\n  cacheOptions: {\n    persistToLocalStorage: true\n  }\n});\n\n// Wait for initialization\nawait client.initialize();\n\n// Common context\nconst context = {\n  userId: 'user-123',\n  userRole: 'premium',\n  location: {\n    country: 'US',\n    region: 'West'\n  },\n  deviceType: 'mobile'\n};\n\n// Evaluate different flag types\nconst isNewFeatureEnabled = await client.getBooleanValue('new-feature', false, context);\nconst uiTheme = await client.getStringValue('ui-theme', 'light', context);\nconst maxItems = await client.getNumberValue('max-items', 10, context);\nconst apiConfig = await client.getJsonValue('api-config', { timeout: 3000 }, context);\n\n// Subscribe to changes\nconst unsubscribe = client.subscribe('new-feature', (newValue) =&gt; {\n  console.log('Feature flag changed:', newValue);\n  updateUI(newValue);\n});\n\n// Listen to events\nclient.on('error', (error) =&gt; {\n  console.error('SDK error:', error);\n});\n\n// Clean up when done\nfunction cleanup() {\n  unsubscribe();\n}\n</code></pre>"},{"location":"sdk/nodejs/","title":"Node.js SDK","text":"<p>The easyFlags Node.js SDK provides a server-side implementation optimized for Node.js applications with high-performance flag evaluation.</p>"},{"location":"sdk/nodejs/#installation","title":"Installation","text":"npmyarnpnpm <pre><code>npm install @easyflags/sdk-node\n</code></pre> <pre><code>yarn add @easyflags/sdk-node\n</code></pre> <pre><code>pnpm add @easyflags/sdk-node\n</code></pre>"},{"location":"sdk/nodejs/#initialization","title":"Initialization","text":"<pre><code>const { FeatureFlagClient } = require('@easyflags/sdk-node');\n// Or using ES modules\n// import { FeatureFlagClient } from '@easyflags/sdk-node';\n\n// Initialize the client\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  tenantId: 'your-tenant-id', // Optional for multi-tenant setups\n  streaming: true, // Enable WebSocket for real-time updates\n  cacheOptions: {\n    ttl: 60000, // Cache TTL in milliseconds (default: 60000)\n    maxSize: 1000, // Maximum number of items in cache\n    dataStore: 'memory' // 'memory', 'redis', or custom store\n  }\n});\n\n// Initialize the client by fetching flags\nawait client.initialize();\n</code></pre>"},{"location":"sdk/nodejs/#using-with-redis-cache","title":"Using with Redis Cache","text":"<p>For production environments, you can use Redis for distributed caching:</p> <pre><code>const { FeatureFlagClient } = require('@easyflags/sdk-node');\nconst { RedisStore } = require('@easyflags/sdk-node-redis');\n\nconst client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  cacheOptions: {\n    dataStore: new RedisStore({\n      host: 'localhost',\n      port: 6379,\n      keyPrefix: 'easyflags:',\n      ttl: 60000 // 1 minute\n    })\n  }\n});\n\nawait client.initialize();\n</code></pre>"},{"location":"sdk/nodejs/#basic-usage","title":"Basic Usage","text":""},{"location":"sdk/nodejs/#boolean-flags","title":"Boolean Flags","text":"<pre><code>// Check if a feature is enabled\nconst isEnabled = await client.getBooleanValue(\n  'new-feature', // Flag key\n  false,         // Default value if flag not found\n  {              // Context object for evaluation\n    userId: 'user-123',\n    userRole: 'premium',\n    location: {\n      country: 'US'\n    }\n  }\n);\n\nif (isEnabled) {\n  // Feature is enabled\n} else {\n  // Feature is disabled\n}\n</code></pre>"},{"location":"sdk/nodejs/#string-flags","title":"String Flags","text":"<pre><code>// Get string variation\nconst apiVersion = await client.getStringValue(\n  'api-version',\n  'v1',\n  { userId: 'user-123' }\n);\n\n// Use the string value\nconst apiEndpoint = `/api/${apiVersion}/items`;\n</code></pre>"},{"location":"sdk/nodejs/#number-flags","title":"Number Flags","text":"<pre><code>// Get number variation\nconst cacheTimeout = await client.getNumberValue(\n  'cache-timeout',\n  3600,\n  { userId: 'user-123' }\n);\n\n// Use the number value\ncache.set('key', value, { ttl: cacheTimeout });\n</code></pre>"},{"location":"sdk/nodejs/#json-flags","title":"JSON Flags","text":"<pre><code>// Get JSON variation\nconst config = await client.getJsonValue(\n  'service-config',\n  { retries: 3, timeout: 5000 },\n  { userId: 'user-123' }\n);\n\n// Use the configuration\ninitializeService(config);\n</code></pre>"},{"location":"sdk/nodejs/#performance-optimization","title":"Performance Optimization","text":""},{"location":"sdk/nodejs/#local-evaluation","title":"Local Evaluation","text":"<p>The Node.js SDK supports local evaluation for improved performance:</p> <pre><code>const client = new FeatureFlagClient({\n  apiUrl: 'https://api.easyflags.example.com',\n  apiKey: 'your-api-key',\n  localEvaluation: true // Enable local evaluation\n});\n\n// Initialize to download all flag rules\nawait client.initialize();\n\n// Now evaluations happen locally without API calls\nconst isEnabled = await client.getBooleanValue('new-feature', false, context);\n</code></pre>"},{"location":"sdk/nodejs/#batch-evaluation","title":"Batch Evaluation","text":"<p>For optimized performance, you can evaluate multiple flags at once:</p> <pre><code>// Evaluate multiple flags\nconst results = await client.batchEvaluate(\n  ['feature-a', 'feature-b', 'feature-c'],\n  { userId: 'user-123', userRole: 'premium' }\n);\n\n// Use the results\nif (results['feature-a']) {\n  // Feature A is enabled\n}\n\nif (results['feature-b']) {\n  // Feature B is enabled\n}\n</code></pre>"},{"location":"sdk/nodejs/#preloading-flags","title":"Preloading Flags","text":"<p>Preload all flags at startup to minimize API calls:</p> <pre><code>// During app initialization\nawait client.initialize({ preloadAll: true });\n\n// Later when flags are needed, they'll be evaluated locally\nconst isEnabled = await client.getBooleanValue('new-feature', false, context);\n</code></pre>"},{"location":"sdk/nodejs/#middleware-integration","title":"Middleware Integration","text":""},{"location":"sdk/nodejs/#express-middleware","title":"Express Middleware","text":"<pre><code>const express = require('express');\nconst { createMiddleware } = require('@easyflags/sdk-node');\n\nconst app = express();\nconst flagClient = new FeatureFlagClient({/* config */});\nawait flagClient.initialize();\n\n// Add middleware to make flags available in requests\napp.use(createMiddleware(flagClient));\n\n// Use in routes\napp.get('/api/items', (req, res) =&gt; {\n  const useNewAlgorithm = req.featureFlags.getBooleanValue(\n    'new-search-algorithm', \n    false,\n    { userId: req.user.id }\n  );\n\n  if (useNewAlgorithm) {\n    return newSearchService.getItems(req.query);\n  } else {\n    return legacySearchService.getItems(req.query);\n  }\n});\n</code></pre>"},{"location":"sdk/nodejs/#koa-middleware","title":"Koa Middleware","text":"<pre><code>const Koa = require('koa');\nconst { createKoaMiddleware } = require('@easyflags/sdk-node');\n\nconst app = new Koa();\nconst flagClient = new FeatureFlagClient({/* config */});\nawait flagClient.initialize();\n\n// Add middleware to make flags available in context\napp.use(createKoaMiddleware(flagClient));\n\n// Use in routes\napp.use(async (ctx) =&gt; {\n  const useNewAlgorithm = await ctx.featureFlags.getBooleanValue(\n    'new-search-algorithm', \n    false,\n    { userId: ctx.state.user.id }\n  );\n\n  if (useNewAlgorithm) {\n    ctx.body = await newSearchService.getItems(ctx.query);\n  } else {\n    ctx.body = await legacySearchService.getItems(ctx.query);\n  }\n});\n</code></pre>"},{"location":"sdk/nodejs/#error-handling","title":"Error Handling","text":"<pre><code>try {\n  const isEnabled = await client.getBooleanValue('new-feature', false, context);\n  // Use the flag value\n} catch (error) {\n  console.error('Failed to evaluate flag:', error);\n  // Fall back to default behavior\n}\n</code></pre>"},{"location":"sdk/nodejs/#subscribing-to-flag-changes","title":"Subscribing to Flag Changes","text":"<p>The SDK supports real-time updates via WebSockets. You can subscribe to flag changes:</p> <pre><code>// Subscribe to a flag\nconst unsubscribe = client.subscribe('new-feature', (value) =&gt; {\n  console.log('Flag value changed:', value);\n  // Update your application state\n});\n\n// Later, unsubscribe when no longer needed\nunsubscribe();\n</code></pre>"},{"location":"sdk/nodejs/#event-handling","title":"Event Handling","text":"<pre><code>// Listen to evaluation events\nclient.on('evaluation', (event) =&gt; {\n  console.log('Flag evaluated:', event.key, 'Result:', event.value);\n});\n\n// Listen to error events\nclient.on('error', (error) =&gt; {\n  console.error('SDK error:', error);\n});\n\n// Listen to ready event\nclient.on('ready', () =&gt; {\n  console.log('SDK is ready to use');\n});\n</code></pre>"},{"location":"sdk/nodejs/#monitoring-metrics","title":"Monitoring &amp; Metrics","text":"<p>The SDK provides built-in metrics that can be exposed to your monitoring system:</p> <pre><code>// Get metrics\nconst metrics = client.getMetrics();\nconsole.log('Evaluation count:', metrics.evaluationCount);\nconsole.log('Cache hit ratio:', metrics.cacheHitRatio);\nconsole.log('Average evaluation time:', metrics.avgEvaluationTime);\n\n// Export to Prometheus (if you're using prom-client)\nconst prometheus = require('prom-client');\nclient.registerPrometheusMetrics(prometheus.register);\n</code></pre>"},{"location":"sdk/nodejs/#using-in-serverless-functions","title":"Using in Serverless Functions","text":"<p>For serverless environments, optimize initialization to minimize cold starts:</p> <pre><code>// Shared instance outside the handler\nconst { FeatureFlagClient } = require('@easyflags/sdk-node');\nlet flagClient;\n\n// Initialize once\nasync function getClient() {\n  if (!flagClient) {\n    flagClient = new FeatureFlagClient({\n      apiUrl: process.env.FLAGS_API_URL,\n      apiKey: process.env.FLAGS_API_KEY,\n      bootstrapFile: './flags.json', // Use local file to avoid API call\n      localEvaluation: true\n    });\n    await flagClient.initialize();\n  }\n  return flagClient;\n}\n\n// Lambda handler\nexports.handler = async (event, context) =&gt; {\n  const client = await getClient();\n\n  const isFeatureEnabled = await client.getBooleanValue(\n    'new-feature',\n    false,\n    { userId: event.userId }\n  );\n\n  if (isFeatureEnabled) {\n    // New feature code\n  } else {\n    // Default code\n  }\n};\n</code></pre>"},{"location":"sdk/nodejs/#full-example","title":"Full Example","text":"<pre><code>const express = require('express');\nconst { FeatureFlagClient, createMiddleware } = require('@easyflags/sdk-node');\n\nasync function startServer() {\n  // Initialize the client\n  const client = new FeatureFlagClient({\n    apiUrl: 'https://api.easyflags.example.com',\n    apiKey: process.env.FLAGS_API_KEY,\n    tenantId: process.env.TENANT_ID,\n    streaming: true,\n    localEvaluation: true,\n    cacheOptions: {\n      ttl: 300000, // 5 minutes\n      dataStore: 'memory'\n    }\n  });\n\n  // Initialize and preload flags\n  await client.initialize({ preloadAll: true });\n\n  // Subscribe to specific flag changes\n  client.subscribe('important-feature', (value) =&gt; {\n    console.log('Important feature changed:', value);\n    // Update application state if needed\n  });\n\n  // Create Express app with middleware\n  const app = express();\n  app.use(express.json());\n  app.use(createMiddleware(client));\n\n  // API routes\n  app.get('/api/search', async (req, res) =&gt; {\n    try {\n      const context = {\n        userId: req.query.userId || 'anonymous',\n        userRole: req.query.role || 'standard',\n        location: {\n          country: req.headers['x-country'] || 'unknown'\n        }\n      };\n\n      const useNewAlgorithm = await req.featureFlags.getBooleanValue(\n        'new-search-algorithm',\n        false,\n        context\n      );\n\n      const searchService = useNewAlgorithm ? \n        require('./search/new-algorithm') :\n        require('./search/legacy-algorithm');\n\n      const results = await searchService.search(req.query.q);\n      res.json({ results });\n    } catch (error) {\n      console.error('Search error:', error);\n      res.status(500).json({ error: 'Search failed' });\n    }\n  });\n\n  // Start server\n  const port = process.env.PORT || 3000;\n  app.listen(port, () =&gt; {\n    console.log(`Server listening on port ${port}`);\n  });\n}\n\nstartServer().catch(console.error);\n</code></pre>"},{"location":"sdk/python/","title":"Python SDK","text":"<p>The easyFlags Python SDK provides a server-side implementation for evaluating feature flags in Python applications.</p>"},{"location":"sdk/python/#installation","title":"Installation","text":"<pre><code>pip install easyflags-sdk\n</code></pre>"},{"location":"sdk/python/#initialization","title":"Initialization","text":"<pre><code>from easyflags import FeatureFlagClient\n\n# Initialize the client\nclient = FeatureFlagClient(\n    api_url=\"https://api.easyflags.example.com\",\n    api_key=\"your-api-key\",\n    tenant_id=\"your-tenant-id\",  # Optional for multi-tenant setups\n    streaming=True,  # Enable WebSocket for real-time updates\n    cache_options={\n        \"ttl\": 60000,  # Cache TTL in milliseconds\n        \"max_size\": 1000,  # Maximum number of items in cache\n        \"data_store\": \"memory\"  # 'memory', 'redis', or custom store\n    }\n)\n\n# Initialize the client by fetching flags\nawait client.initialize()\n</code></pre>"},{"location":"sdk/python/#using-with-redis-cache","title":"Using with Redis Cache","text":"<p>For production environments, you can use Redis for distributed caching:</p> <pre><code>from easyflags import FeatureFlagClient\nfrom easyflags.stores import RedisStore\n\n# Initialize with Redis store\nclient = FeatureFlagClient(\n    api_url=\"https://api.easyflags.example.com\",\n    api_key=\"your-api-key\",\n    cache_options={\n        \"data_store\": RedisStore(\n            host=\"localhost\",\n            port=6379,\n            key_prefix=\"easyflags:\",\n            ttl=60000  # 1 minute\n        )\n    }\n)\n\n# Initialize the client\nawait client.initialize()\n</code></pre>"},{"location":"sdk/python/#basic-usage","title":"Basic Usage","text":""},{"location":"sdk/python/#boolean-flags","title":"Boolean Flags","text":"<pre><code># Check if a feature is enabled\nis_enabled = await client.get_boolean_value(\n    \"new-feature\",  # Flag key\n    False,          # Default value if flag not found\n    {               # Context object for evaluation\n        \"userId\": \"user-123\",\n        \"userRole\": \"premium\",\n        \"location\": {\n            \"country\": \"US\"\n        }\n    }\n)\n\nif is_enabled:\n    # Feature is enabled\n    print(\"Feature is enabled\")\nelse:\n    # Feature is disabled\n    print(\"Feature is disabled\")\n</code></pre>"},{"location":"sdk/python/#string-flags","title":"String Flags","text":"<pre><code># Get string variation\napi_version = await client.get_string_value(\n    \"api-version\",\n    \"v1\",\n    {\"userId\": \"user-123\"}\n)\n\n# Use the string value\napi_endpoint = f\"/api/{api_version}/items\"\n</code></pre>"},{"location":"sdk/python/#number-flags","title":"Number Flags","text":"<pre><code># Get number variation\ncache_timeout = await client.get_number_value(\n    \"cache-timeout\",\n    3600,\n    {\"userId\": \"user-123\"}\n)\n\n# Use the number value\ncache.set(\"key\", value, ttl=cache_timeout)\n</code></pre>"},{"location":"sdk/python/#json-flags","title":"JSON Flags","text":"<pre><code># Get JSON variation\nconfig = await client.get_json_value(\n    \"service-config\",\n    {\"retries\": 3, \"timeout\": 5000},\n    {\"userId\": \"user-123\"}\n)\n\n# Use the configuration\ninitialize_service(**config)\n</code></pre>"},{"location":"sdk/python/#performance-optimization","title":"Performance Optimization","text":""},{"location":"sdk/python/#local-evaluation","title":"Local Evaluation","text":"<p>The Python SDK supports local evaluation for improved performance:</p> <pre><code>client = FeatureFlagClient(\n    api_url=\"https://api.easyflags.example.com\",\n    api_key=\"your-api-key\",\n    local_evaluation=True  # Enable local evaluation\n)\n\n# Initialize to download all flag rules\nawait client.initialize()\n\n# Now evaluations happen locally without API calls\nis_enabled = await client.get_boolean_value(\"new-feature\", False, context)\n</code></pre>"},{"location":"sdk/python/#batch-evaluation","title":"Batch Evaluation","text":"<p>For optimized performance, you can evaluate multiple flags at once:</p> <pre><code># Evaluate multiple flags\nresults = await client.batch_evaluate(\n    [\"feature-a\", \"feature-b\", \"feature-c\"],\n    {\"userId\": \"user-123\", \"userRole\": \"premium\"}\n)\n\n# Use the results\nif results.get(\"feature-a\"):\n    # Feature A is enabled\n    pass\n\nif results.get(\"feature-b\"):\n    # Feature B is enabled\n    pass\n</code></pre>"},{"location":"sdk/python/#preloading-flags","title":"Preloading Flags","text":"<p>Preload all flags at startup to minimize API calls:</p> <pre><code># During app initialization\nawait client.initialize(preload_all=True)\n\n# Later when flags are needed, they'll be evaluated locally\nis_enabled = await client.get_boolean_value(\"new-feature\", False, context)\n</code></pre>"},{"location":"sdk/python/#web-framework-integration","title":"Web Framework Integration","text":""},{"location":"sdk/python/#fastapi-integration","title":"FastAPI Integration","text":"<pre><code>from fastapi import FastAPI, Depends, Request\nfrom easyflags import FeatureFlagClient\nfrom easyflags.integrations.fastapi import FeatureFlagMiddleware, get_feature_flags\n\napp = FastAPI()\nflag_client = FeatureFlagClient(\n    api_url=\"https://api.easyflags.example.com\",\n    api_key=\"your-api-key\"\n)\n\n# Initialize during startup\n@app.on_event(\"startup\")\nasync def startup_event():\n    await flag_client.initialize()\n\n# Add middleware to make flags available in requests\napp.add_middleware(FeatureFlagMiddleware, client=flag_client)\n\n# Use in routes with dependency injection\n@app.get(\"/api/items\")\nasync def get_items(\n    request: Request,\n    feature_flags=Depends(get_feature_flags)\n):\n    context = {\n        \"userId\": request.query_params.get(\"userId\", \"anonymous\"),\n        \"userRole\": request.query_params.get(\"role\", \"standard\")\n    }\n\n    use_new_algorithm = await feature_flags.get_boolean_value(\n        \"new-search-algorithm\",\n        False,\n        context\n    )\n\n    if use_new_algorithm:\n        # Use new search algorithm\n        return {\"items\": await new_search_service.get_items(request.query_params)}\n    else:\n        # Use legacy search algorithm\n        return {\"items\": await legacy_search_service.get_items(request.query_params)}\n</code></pre>"},{"location":"sdk/python/#flask-integration","title":"Flask Integration","text":"<pre><code>from flask import Flask, request, g\nfrom easyflags import FeatureFlagClient\nfrom easyflags.integrations.flask import feature_flags_middleware\n\napp = Flask(__name__)\nflag_client = FeatureFlagClient(\n    api_url=\"https://api.easyflags.example.com\",\n    api_key=\"your-api-key\"\n)\n\n# Initialize the client\n@app.before_first_request\ndef initialize_flags():\n    await flag_client.initialize()\n\n# Add middleware to make flags available in requests\napp.before_request(feature_flags_middleware(flag_client))\n\n# Use in routes\n@app.route(\"/api/items\")\ndef get_items():\n    context = {\n        \"userId\": request.args.get(\"userId\", \"anonymous\"),\n        \"userRole\": request.args.get(\"role\", \"standard\")\n    }\n\n    use_new_algorithm = g.feature_flags.get_boolean_value(\n        \"new-search-algorithm\",\n        False,\n        context\n    )\n\n    if use_new_algorithm:\n        # Use new search algorithm\n        return {\"items\": new_search_service.get_items(request.args)}\n    else:\n        # Use legacy search algorithm\n        return {\"items\": legacy_search_service.get_items(request.args)}\n</code></pre>"},{"location":"sdk/python/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    is_enabled = await client.get_boolean_value(\"new-feature\", False, context)\n    # Use the flag value\nexcept Exception as error:\n    print(f\"Failed to evaluate flag: {error}\")\n    # Fall back to default behavior\n    is_enabled = False\n</code></pre>"},{"location":"sdk/python/#subscribing-to-flag-changes","title":"Subscribing to Flag Changes","text":"<p>The SDK supports real-time updates via WebSockets. You can subscribe to flag changes:</p> <pre><code># Subscribe to a flag\nasync def handle_flag_change(value):\n    print(f\"Flag value changed: {value}\")\n    # Update your application state\n\nunsubscribe = client.subscribe(\"new-feature\", handle_flag_change)\n\n# Later, unsubscribe when no longer needed\nunsubscribe()\n</code></pre>"},{"location":"sdk/python/#event-handling","title":"Event Handling","text":"<pre><code># Listen to evaluation events\nasync def on_evaluation(event):\n    print(f\"Flag evaluated: {event['key']}, Result: {event['value']}\")\n\n# Listen to error events\nasync def on_error(error):\n    print(f\"SDK error: {error}\")\n\n# Listen to ready event\nasync def on_ready():\n    print(\"SDK is ready to use\")\n\nclient.on(\"evaluation\", on_evaluation)\nclient.on(\"error\", on_error)\nclient.on(\"ready\", on_ready)\n</code></pre>"},{"location":"sdk/python/#monitoring-metrics","title":"Monitoring &amp; Metrics","text":"<p>The SDK provides built-in metrics that can be exposed to your monitoring system:</p> <pre><code># Get metrics\nmetrics = client.get_metrics()\nprint(f\"Evaluation count: {metrics['evaluation_count']}\")\nprint(f\"Cache hit ratio: {metrics['cache_hit_ratio']}\")\nprint(f\"Average evaluation time: {metrics['avg_evaluation_time']}\")\n\n# Export to Prometheus (if you're using prometheus_client)\nfrom prometheus_client import Counter, Gauge\nclient.register_prometheus_metrics()\n</code></pre>"},{"location":"sdk/python/#async-and-sync-api","title":"Async and Sync API","text":"<p>The SDK provides both async and sync APIs:</p> <pre><code># Async API (preferred for async applications)\nasync def async_example():\n    is_enabled = await client.get_boolean_value(\"feature\", False, context)\n    return is_enabled\n\n# Sync API (for synchronous applications)\ndef sync_example():\n    is_enabled = client.get_boolean_value_sync(\"feature\", False, context)\n    return is_enabled\n</code></pre>"},{"location":"sdk/python/#full-example","title":"Full Example","text":"<p>```python import asyncio from fastapi import FastAPI, Depends, Request from easyflags import FeatureFlagClient from easyflags.integrations.fastapi import FeatureFlagMiddleware, get_feature_flags</p>"},{"location":"sdk/python/#initialize-the-feature-flag-client","title":"Initialize the feature flag client","text":"<p>async def initialize_flags():     client = FeatureFlagClient(         api_url=\"https://api.easyflags.example.com\",         api_key=\"your-api-key\",         tenant_id=\"your-tenant-id\",         streaming=True,         local_evaluation=True,         cache_options={             \"ttl\": 300000,  # 5 minutes             \"data_store\": \"memory\"         }     )</p> <pre><code># Initialize and preload flags\nawait client.initialize(preload_all=True)\n\n# Subscribe to specific flag changes\nasync def handle_important_feature(value):\n    print(f\"Important feature changed: {value}\")\n    # Update application state if needed\n\nclient.subscribe(\"important-feature\", handle_important_feature)\n\nreturn client\n</code></pre>"},{"location":"sdk/python/#create-fastapi-app","title":"Create FastAPI app","text":"<p>app = FastAPI()</p>"},{"location":"sdk/python/#initialize-client-during-startup","title":"Initialize client during startup","text":"<p>@app.on_event(\"startup\") async def startup_event():     app.state.flag_client = await initialize_flags()     # Add middleware to make flags available in requests     app.add_middleware(         FeatureFlagMiddleware,         client=app.state.flag_client     )</p>"},{"location":"sdk/python/#define-routes","title":"Define routes","text":"<p>@app.get(\"/api/search\") async def search(     request: Request,     q: str,     feature_flags=Depends(get_feature_flags) ):     try:         # Create context from request         context = {             \"userId\": request.query_params.get(\"userId\", \"anonymous\"),             \"userRole\": request.query_params.get(\"role\", \"standard\"),             \"location\": {                 \"country\": request.headers.get(\"x-country\", \"unknown\")             }         }</p> <pre><code>    # Evaluate feature flag\n    use_new_algorithm = await feature_flags.get_boolean_value(\n        \"new-search-algorithm\",\n        False,\n        context\n    )\n\n    # Use appropriate search service\n    if use_new_algorithm:\n        from search.new_algorithm import search as search_function\n    else:\n        from search.legacy_algorithm import search as search_function\n\n    # Perform search\n    results = await search_function(q)\n    return {\"results\": results}\n\nexcept Exception as error:\n    print(f\"Search error: {error}\")\n    return {\"error\": \"Search failed\"}, 500\n</code></pre> <p>if name == \"main\":     import uvicorn     uvicorn.run(app, host=\"0.0.0.0\", port=8000) </p>"},{"location":"sdk/react/","title":"React SDK","text":"<p>The easyFlags React SDK provides a set of hooks and components for easily integrating feature flags into your React applications.</p>"},{"location":"sdk/react/#installation","title":"Installation","text":"npmyarnpnpm <pre><code>npm install @easyflags/sdk-react\n</code></pre> <pre><code>yarn add @easyflags/sdk-react\n</code></pre> <pre><code>pnpm add @easyflags/sdk-react\n</code></pre>"},{"location":"sdk/react/#setup","title":"Setup","text":"<p>Wrap your application with the <code>FeatureFlagProvider</code> to initialize the SDK:</p> <pre><code>import { FeatureFlagProvider } from '@easyflags/sdk-react';\n\nfunction App() {\n  return (\n    &lt;FeatureFlagProvider\n      apiUrl=\"https://api.easyflags.example.com\"\n      apiKey=\"your-api-key\"\n      tenantId=\"your-tenant-id\" // Optional for multi-tenant setups\n      options={{\n        streaming: true, // Enable WebSocket for real-time updates\n        cacheOptions: {\n          persistToLocalStorage: true\n        }\n      }}\n    &gt;\n      &lt;YourApp /&gt;\n    &lt;/FeatureFlagProvider&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#basic-usage","title":"Basic Usage","text":""},{"location":"sdk/react/#usefeatureflag-hook","title":"useFeatureFlag Hook","text":"<p>The primary way to use feature flags in your components:</p> <pre><code>import { useFeatureFlag } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  // For boolean flags\n  const isNewFeatureEnabled = useFeatureFlag('new-feature', false, {\n    userId: 'user-123',\n    userRole: 'premium'\n  });\n\n  return (\n    &lt;div&gt;\n      {isNewFeatureEnabled ? (\n        &lt;NewFeatureComponent /&gt;\n      ) : (\n        &lt;LegacyComponent /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#type-specific-hooks","title":"Type-Specific Hooks","text":"<p>The SDK provides typed hooks for different flag types:</p> <pre><code>import {\n  useBooleanFlag,\n  useStringFlag,\n  useNumberFlag,\n  useJsonFlag\n} from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  // Boolean flag\n  const isEnabled = useBooleanFlag('new-feature', false);\n\n  // String flag\n  const theme = useStringFlag('theme', 'light');\n\n  // Number flag\n  const maxItems = useNumberFlag('max-items', 10);\n\n  // JSON flag\n  const config = useJsonFlag('api-config', { timeout: 3000 });\n\n  return (\n    &lt;div className={theme}&gt;\n      {isEnabled &amp;&amp; &lt;NewFeature config={config} /&gt;}\n      &lt;ItemList maxItems={maxItems} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#feature-flag-components","title":"Feature Flag Components","text":""},{"location":"sdk/react/#featureflag-component","title":"FeatureFlag Component","text":"<p>Conditionally render content based on a feature flag:</p> <pre><code>import { FeatureFlag } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  return (\n    &lt;div&gt;\n      &lt;FeatureFlag\n        flagKey=\"new-feature\"\n        defaultValue={false}\n        context={{ userId: 'user-123' }}\n      &gt;\n        {(isEnabled) =&gt; (\n          isEnabled ? &lt;NewFeature /&gt; : &lt;LegacyFeature /&gt;\n        )}\n      &lt;/FeatureFlag&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#when-component","title":"When Component","text":"<p>Declaratively control rendering based on feature flags:</p> <pre><code>import { When } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  return (\n    &lt;div&gt;\n      &lt;When\n        flagKey=\"new-feature\"\n        isEnabled={true}\n        context={{ userId: 'user-123' }}\n      &gt;\n        &lt;NewFeature /&gt;\n      &lt;/When&gt;\n\n      &lt;When\n        flagKey=\"new-feature\"\n        isEnabled={false}\n        context={{ userId: 'user-123' }}\n      &gt;\n        &lt;LegacyFeature /&gt;\n      &lt;/When&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#user-context","title":"User Context","text":""},{"location":"sdk/react/#using-the-usecontext-hook","title":"Using the useContext Hook","text":"<pre><code>import { useContext, useFeatureFlag } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  // Set the user context once for all flag evaluations in the component\n  const { setContext } = useContext();\n\n  useEffect(() =&gt; {\n    setContext({\n      userId: user.id,\n      userRole: user.role,\n      location: {\n        country: user.country\n      }\n    });\n  }, [user, setContext]);\n\n  // No need to pass context to individual hooks as it's set globally\n  const isFeatureEnabled = useFeatureFlag('new-feature', false);\n\n  return (\n    &lt;div&gt;\n      {isFeatureEnabled &amp;&amp; &lt;NewFeature /&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#using-the-context-provider","title":"Using the Context Provider","text":"<pre><code>import { ContextProvider } from '@easyflags/sdk-react';\n\nfunction UserArea({ user }) {\n  const context = {\n    userId: user.id,\n    userRole: user.role,\n    location: {\n      country: user.country\n    }\n  };\n\n  return (\n    &lt;ContextProvider value={context}&gt;\n      {/* All child components will use this context */}\n      &lt;Dashboard /&gt;\n      &lt;UserProfile /&gt;\n      &lt;Settings /&gt;\n    &lt;/ContextProvider&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#loading-states","title":"Loading States","text":"<p>The SDK provides a hook to check if flags are still loading:</p> <pre><code>import { useFeatureFlag, useFlags } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  const { isLoading } = useFlags();\n  const isFeatureEnabled = useFeatureFlag('new-feature', false);\n\n  if (isLoading) {\n    return &lt;LoadingSpinner /&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      {isFeatureEnabled &amp;&amp; &lt;NewFeature /&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#real-time-updates","title":"Real-time Updates","text":"<p>Hooks automatically react to flag changes over WebSocket:</p> <pre><code>import { useFeatureFlag } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  // This will automatically re-render when the flag changes\n  const isFeatureEnabled = useFeatureFlag('new-feature', false);\n\n  return (\n    &lt;div&gt;\n      {isFeatureEnabled &amp;&amp; &lt;NewFeature /&gt;}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#accessing-the-client-directly","title":"Accessing the Client Directly","text":"<p>For advanced use cases, you can access the underlying client:</p> <pre><code>import { useClient } from '@easyflags/sdk-react';\n\nfunction MyComponent() {\n  const client = useClient();\n\n  const handleBatchOperation = async () =&gt; {\n    // Evaluate multiple flags at once for better performance\n    const results = await client.batchEvaluate(\n      ['feature-a', 'feature-b', 'feature-c'],\n      { userId: 'user-123' }\n    );\n\n    // Use the results\n    console.log(results);\n  };\n\n  return (\n    &lt;button onClick={handleBatchOperation}&gt;\n      Perform Batch Operation\n    &lt;/button&gt;\n  );\n}\n</code></pre>"},{"location":"sdk/react/#testing-with-the-sdk","title":"Testing with the SDK","text":""},{"location":"sdk/react/#with-react-testing-library","title":"With React Testing Library","text":"<pre><code>import { render, screen } from '@testing-library/react';\nimport { FeatureFlagProvider } from '@easyflags/sdk-react';\n\n// Mock provider for tests\nfunction renderWithFlags(ui, mockFlags = {}) {\n  return render(\n    &lt;FeatureFlagProvider\n      apiUrl=\"fake-url\"\n      apiKey=\"fake-key\"\n      mockFlags={mockFlags} // Will use these values instead of API calls\n    &gt;\n      {ui}\n    &lt;/FeatureFlagProvider&gt;\n  );\n}\n\ntest('renders new feature when flag is enabled', () =&gt; {\n  renderWithFlags(&lt;MyComponent /&gt;, {\n    'new-feature': true\n  });\n\n  expect(screen.getByTestId('new-feature')).toBeInTheDocument();\n});\n\ntest('renders legacy feature when flag is disabled', () =&gt; {\n  renderWithFlags(&lt;MyComponent /&gt;, {\n    'new-feature': false\n  });\n\n  expect(screen.getByTestId('legacy-feature')).toBeInTheDocument();\n});\n</code></pre>"},{"location":"sdk/react/#complete-example","title":"Complete Example","text":"<pre><code>import React from 'react';\nimport {\n  FeatureFlagProvider,\n  useBooleanFlag,\n  useStringFlag,\n  ContextProvider\n} from '@easyflags/sdk-react';\n\n// Top-level App with provider\nfunction App({ user }) {\n  return (\n    &lt;FeatureFlagProvider\n      apiUrl=\"https://api.easyflags.example.com\"\n      apiKey=\"your-api-key\"\n      options={{ streaming: true }}\n    &gt;\n      &lt;ContextProvider \n        value={{ \n          userId: user.id, \n          userRole: user.role \n        }}\n      &gt;\n        &lt;Header /&gt;\n        &lt;MainContent /&gt;\n        &lt;Footer /&gt;\n      &lt;/ContextProvider&gt;\n    &lt;/FeatureFlagProvider&gt;\n  );\n}\n\n// Component using feature flags\nfunction MainContent() {\n  const newDashboard = useBooleanFlag('new-dashboard', false);\n  const theme = useStringFlag('color-theme', 'light');\n\n  return (\n    &lt;main className={`theme-${theme}`}&gt;\n      {newDashboard ? (\n        &lt;NewDashboard /&gt;\n      ) : (\n        &lt;LegacyDashboard /&gt;\n      )}\n    &lt;/main&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"system-design/","title":"System Design Documentation","text":"<p>Welcome to the EasyFlags system design documentation. This section provides detailed diagrams and explanations of the architecture, flows, and components of the feature flag service.</p>"},{"location":"system-design/#available-diagrams","title":"Available Diagrams","text":"<ul> <li>System Overview - High-level architecture of the entire system</li> <li>Multi-Tenant Architecture - How the system supports multiple tenants</li> <li>Feature Flag Evaluation Flow - The process of evaluating feature flags</li> <li>Tenant Provisioning and Isolation - How tenants are created and isolated</li> <li>Admin UI Workflow - User interface states and flows</li> </ul>"},{"location":"system-design/#key-architectural-principles","title":"Key Architectural Principles","text":""},{"location":"system-design/#1-multi-tenant-by-design","title":"1. Multi-Tenant by Design","text":"<p>The entire system is built with multi-tenancy as a core principle, ensuring proper isolation and security between different clients.</p>"},{"location":"system-design/#2-performance-first-evaluation","title":"2. Performance-First Evaluation","text":"<p>Flag evaluation is optimized for high-performance with multi-level caching and efficient algorithms.</p>"},{"location":"system-design/#3-real-time-updates","title":"3. Real-Time Updates","text":"<p>Changes to flag configurations are propagated in real-time to all connected clients via WebSockets.</p>"},{"location":"system-design/#4-scalable-architecture","title":"4. Scalable Architecture","text":"<p>The system is designed to scale horizontally to support high-volume flag evaluations across many tenants.</p>"},{"location":"system-design/#5-developer-friendly-sdks","title":"5. Developer-Friendly SDKs","text":"<p>Client SDKs prioritize ease of use while maintaining powerful capabilities and performance.</p>"},{"location":"system-design/#system-components","title":"System Components","text":"Component Technology Description Backend Server NestJS Core service handling all flag logic Admin UI React Web interface for management Database PostgreSQL Persistent storage with RLS Cache Redis High-performance evaluation cache WebSocket Server Socket.IO Real-time update notifications JavaScript SDK TypeScript Client library for JS apps React SDK React React-specific components"},{"location":"system-design/admin-ui-workflow/","title":"Admin UI Workflow","text":"<p>This state diagram illustrates the administrative user interface workflow for managing feature flags, tenants, and users.</p> <pre><code>stateDiagram-v2\n    [*] --&gt; Login\n    Login --&gt; Dashboard\n\n    state Dashboard {\n        [*] --&gt; Overview\n        Overview --&gt; Tenants\n        Overview --&gt; Flags\n        Overview --&gt; Users\n\n        state Tenants {\n            [*] --&gt; TenantList\n            TenantList --&gt; TenantDetails\n            TenantDetails --&gt; EditTenant\n            TenantDetails --&gt; DeleteTenant\n            TenantList --&gt; CreateTenant\n        }\n\n        state Flags {\n            [*] --&gt; FlagList\n            FlagList --&gt; FlagDetails\n            FlagDetails --&gt; EditFlag\n            FlagDetails --&gt; DeleteFlag\n            FlagList --&gt; CreateFlag\n            FlagDetails --&gt; ToggleFlag\n        }\n\n        state Users {\n            [*] --&gt; UserList\n            UserList --&gt; UserDetails\n            UserDetails --&gt; EditUser\n            UserDetails --&gt; DeleteUser\n            UserList --&gt; CreateUser\n        }\n    }\n\n    Dashboard --&gt; Logout\n    Logout --&gt; [*]</code></pre>"},{"location":"system-design/admin-ui-workflow/#admin-ui-key-sections","title":"Admin UI Key Sections","text":""},{"location":"system-design/admin-ui-workflow/#dashboard-overview","title":"Dashboard Overview","text":"<ul> <li>System-wide metrics and statistics</li> <li>Recent activity log</li> <li>Tenant health indicators</li> <li>Quick access to common operations</li> </ul>"},{"location":"system-design/admin-ui-workflow/#tenant-management","title":"Tenant Management","text":"<ul> <li>List all tenants with search and filter capabilities</li> <li>Create new tenants with template options</li> <li>Edit tenant settings and metadata</li> <li>Delete tenants (with safety confirmations)</li> <li>Manage tenant-specific API keys</li> </ul>"},{"location":"system-design/admin-ui-workflow/#feature-flag-management","title":"Feature Flag Management","text":"<ul> <li>List all flags with status indicators and search</li> <li>Create new feature flags with various types (boolean, string, number, JSON)</li> <li>Edit flag rules and targeting conditions</li> <li>Toggle flags on/off with one click</li> <li>View flag evaluation history and metrics</li> </ul>"},{"location":"system-design/admin-ui-workflow/#user-management","title":"User Management","text":"<ul> <li>List all users with search and filter</li> <li>Create new users with specific roles</li> <li>Edit user permissions and roles</li> <li>Delete users</li> <li>Cross-tenant user administration (for super admins) </li> </ul>"},{"location":"system-design/flag-evaluation-flow/","title":"Feature Flag Evaluation Flow","text":"<p>This sequence diagram illustrates the process of evaluating a feature flag, from client request through the SDK to the backend service.</p> <pre><code>sequenceDiagram\n    participant Client as Client Application\n    participant SDK as JavaScript SDK\n    participant Backend as Backend Server\n    participant DB as Database\n    participant Cache as Redis Cache\n\n    Client-&gt;&gt;SDK: Initialize with tenant ID\n    SDK-&gt;&gt;Backend: Authenticate (JWT)\n    Backend-&gt;&gt;SDK: Return auth token\n\n    Client-&gt;&gt;SDK: evaluateFlag(\"my-flag\", context)\n\n    alt Local Cache Hit\n        SDK-&gt;&gt;SDK: Return cached value\n    else Cache Miss\n        SDK-&gt;&gt;Backend: GET /api/v1/evaluation/my-flag\n        Backend-&gt;&gt;Cache: Check cache\n\n        alt Cache Hit\n            Cache-&gt;&gt;Backend: Return cached result\n        else Cache Miss\n            Backend-&gt;&gt;DB: Query flag definition\n            DB-&gt;&gt;Backend: Return flag data\n            Backend-&gt;&gt;Backend: Apply rules to context\n            Backend-&gt;&gt;Cache: Store result\n        end\n\n        Backend-&gt;&gt;SDK: Return evaluation result\n        SDK-&gt;&gt;SDK: Store in local cache\n    end\n\n    SDK-&gt;&gt;Client: Return flag value\n\n    Backend-&gt;&gt;SDK: WebSocket notification of flag change\n    SDK-&gt;&gt;SDK: Invalidate cache</code></pre>"},{"location":"system-design/flag-evaluation-flow/#evaluation-process-details","title":"Evaluation Process Details","text":"<ol> <li>SDK Initialization: The client initializes the SDK with tenant ID and optional configuration</li> <li>Authentication: The SDK authenticates with the backend to obtain a valid token</li> <li>Local Caching: SDKs maintain a local cache to minimize network requests </li> <li>Context-based Evaluation: Flag values can vary based on user context (user ID, attributes, etc.)</li> <li>Multi-level Caching: The system uses both client-side and server-side caching</li> <li>Real-time Updates: WebSocket connections notify clients when flag configurations change</li> <li>Fallback Values: SDKs provide default values in case of network failures </li> </ol>"},{"location":"system-design/multi-tenant-architecture/","title":"Multi-Tenant Architecture","text":"<p>This diagram shows how the feature flag service handles multiple tenants, ensuring proper isolation and security between different clients.</p> <pre><code>graph TD\n    subgraph \"Client Applications\"\n        TenantA[\"Tenant A App\"]\n        TenantB[\"Tenant B App\"]\n        TenantC[\"Tenant C App\"]\n    end\n\n    subgraph \"Backend Services\"\n        API[\"API Gateway\"]\n        Auth[\"Auth Service\"]\n        FlagService[\"Feature Flag Service\"]\n        TenantService[\"Tenant Service\"]\n\n        subgraph \"Data Storage\"\n            DB[(PostgreSQL with RLS)]\n            Cache[(Redis Cache)]\n        end\n    end\n\n    TenantA --&gt;|Requests with&lt;br&gt;Tenant ID| API\n    TenantB --&gt;|Requests with&lt;br&gt;Tenant ID| API\n    TenantC --&gt;|Requests with&lt;br&gt;Tenant ID| API\n\n    API --&gt;|Authenticate| Auth\n    Auth --&gt;|Validate Tenant| TenantService\n    API --&gt;|Forward Request| FlagService\n\n    FlagService --&gt;|Query with Tenant Context| DB\n    FlagService --&gt;|Cache Results| Cache\n\n    style DB fill:#d9b3ff\n    style API fill:#b3d9ff\n    style FlagService fill:#b3d9ff\n    style Auth fill:#ffcc99\n    style TenantService fill:#ffcc99</code></pre>"},{"location":"system-design/multi-tenant-architecture/#multi-tenant-implementation-details","title":"Multi-Tenant Implementation Details","text":"<ul> <li>Tenant Identification: Each request includes a tenant identifier (either in headers, JWT token, or URL)</li> <li>Row-Level Security (RLS): Database-level isolation ensures tenants can only access their own data</li> <li>Tenant Middleware: NestJS middleware validates and enforces tenant context on all requests</li> <li>Isolated Caching: Cache keys include tenant identifiers to prevent cross-tenant data leakage</li> <li>Cross-Tenant Administration: Admin users with special permissions can manage multiple tenants </li> </ul>"},{"location":"system-design/overview/","title":"System Overview","text":"<p>This diagram illustrates the high-level architecture of the feature flag service, showing the main components and their interactions.</p> <pre><code>graph TD\n    subgraph \"Feature Flag Service\"\n        Server[\"Backend Server (NestJS)\"]\n        AdminUI[\"Admin UI (React)\"]\n        DB[(PostgreSQL Database)]\n        Redis[(Redis Cache)]\n        WSS[WebSocket Server]\n\n        subgraph \"SDKs\"\n            JS_SDK[\"JavaScript SDK\"]\n            React_SDK[\"React SDK\"]\n        end\n    end\n\n    subgraph \"Client Applications\"\n        SaaS_App[\"SaaS Application\"]\n        AdminUser[\"Admin User\"]\n    end\n\n    AdminUser --&gt;|Manages Flags| AdminUI\n    AdminUI --&gt;|API Calls| Server\n    Server --&gt;|Stores Data| DB\n    Server --&gt;|Caches Evaluations| Redis\n    Server --&gt;|Broadcasts Changes| WSS\n    SaaS_App --&gt;|Evaluates Flags| JS_SDK\n    SaaS_App --&gt;|React Components| React_SDK\n    JS_SDK --&gt;|API Requests| Server\n    JS_SDK --&gt;|Real-time Updates| WSS\n    React_SDK --&gt;|Uses| JS_SDK\n\n    style Server fill:#b3d9ff\n    style AdminUI fill:#ffcc99\n    style DB fill:#d9b3ff\n    style Redis fill:#ffb3b3\n    style WSS fill:#b3ffb3</code></pre>"},{"location":"system-design/overview/#key-components","title":"Key Components","text":"<ul> <li>Backend Server (NestJS): Core service that handles all feature flag logic</li> <li>Admin UI (React): Web interface for managing feature flags and tenants</li> <li>PostgreSQL Database: Persistent storage for all feature flags and tenant data</li> <li>Redis Cache: High-performance cache for flag evaluations</li> <li>WebSocket Server: Enables real-time updates when flag configurations change</li> <li>SDKs: Client libraries for JavaScript and React applications to consume the service </li> </ul>"},{"location":"system-design/tenant-provisioning/","title":"Tenant Provisioning and Isolation","text":"<p>This diagram illustrates how new tenants are provisioned and how data isolation is maintained between tenants.</p> <pre><code>graph TD\n    Admin[\"Admin User\"] --&gt;|Creates| Tenant[\"New Tenant\"]\n\n    subgraph \"Tenant Provisioning\"\n        Tenant --&gt;|Generates| Schema[\"Database Schema\"]\n        Tenant --&gt;|Applies| RLS[\"Row-Level Security\"]\n        Tenant --&gt;|Creates| DefaultFlags[\"Default Feature Flags\"]\n        Tenant --&gt;|Sets Up| API_Keys[\"API Keys\"]\n    end\n\n    subgraph \"Data Isolation\"\n        API[\"API Request\"] --&gt;|Includes| TenantID[\"Tenant ID\"]\n        TenantID --&gt;|Validated By| Middleware[\"Tenant Middleware\"]\n        Middleware --&gt;|Enforces| RLS\n        Query[\"Database Query\"] --&gt;|Filtered By| RLS\n    end\n\n    style Admin fill:#ffcc99\n    style Tenant fill:#b3d9ff\n    style RLS fill:#ffb3b3\n    style Middleware fill:#b3ffb3</code></pre>"},{"location":"system-design/tenant-provisioning/#tenant-provisioning-process","title":"Tenant Provisioning Process","text":"<ol> <li>Tenant Creation: Admin users can create new tenants through the Admin UI or API</li> <li>Database Isolation: Each tenant's data is isolated using PostgreSQL Row-Level Security policies</li> <li>Default Setup: New tenants are initialized with a set of default feature flags</li> <li>API Key Generation: Each tenant receives unique API keys for authentication</li> <li>Permission Setup: Default roles and permissions are established for the tenant</li> </ol>"},{"location":"system-design/tenant-provisioning/#data-isolation-mechanisms","title":"Data Isolation Mechanisms","text":"<ol> <li>Request Context: Every API request must include a tenant identifier</li> <li>Middleware Validation: NestJS middleware validates the tenant context on each request</li> <li>RLS Policies: Database queries automatically filter data by tenant ID</li> <li>Cache Isolation: Redis cache keys include tenant identifiers</li> <li>Cross-tenant Operations: Special admin permissions are required for cross-tenant operations </li> </ol>"}]}